# generated by datamodel-codegen:
#   filename:  keycloak-api-spec.yaml

from __future__ import annotations

from enum import Enum
from typing import Annotated, Any

from pydantic import BaseModel, ConfigDict, Field


class Access(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    roles: list[str] | None = None
    verify_caller: bool | None = None


class AddressClaimSet(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    formatted: str | None = None
    street_address: str | None = None
    locality: str | None = None
    region: str | None = None
    postal_code: str | None = None
    country: str | None = None


class AuthDetailsRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    realm_id: Annotated[str | None, Field(alias="realmId")] = None
    client_id: Annotated[str | None, Field(alias="clientId")] = None
    user_id: Annotated[str | None, Field(alias="userId")] = None
    ip_address: Annotated[str | None, Field(alias="ipAddress")] = None


class AuthenticationExecutionExportRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    authenticator_config: Annotated[str | None, Field(alias="authenticatorConfig")] = (
        None
    )
    authenticator: str | None = None
    authenticator_flow: Annotated[bool | None, Field(alias="authenticatorFlow")] = None
    requirement: str | None = None
    priority: int | None = None
    autheticator_flow: Annotated[bool | None, Field(alias="autheticatorFlow")] = None
    flow_alias: Annotated[str | None, Field(alias="flowAlias")] = None
    user_setup_allowed: Annotated[bool | None, Field(alias="userSetupAllowed")] = None


class AuthenticationExecutionInfoRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str | None = None
    requirement: str | None = None
    display_name: Annotated[str | None, Field(alias="displayName")] = None
    alias: str | None = None
    description: str | None = None
    requirement_choices: Annotated[
        list[str] | None, Field(alias="requirementChoices")
    ] = None
    configurable: bool | None = None
    authentication_flow: Annotated[bool | None, Field(alias="authenticationFlow")] = (
        None
    )
    provider_id: Annotated[str | None, Field(alias="providerId")] = None
    authentication_config: Annotated[
        str | None, Field(alias="authenticationConfig")
    ] = None
    flow_id: Annotated[str | None, Field(alias="flowId")] = None
    level: int | None = None
    index: int | None = None
    priority: int | None = None


class AuthenticationExecutionRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    authenticator_config: Annotated[str | None, Field(alias="authenticatorConfig")] = (
        None
    )
    authenticator: str | None = None
    authenticator_flow: Annotated[bool | None, Field(alias="authenticatorFlow")] = None
    requirement: str | None = None
    priority: int | None = None
    autheticator_flow: Annotated[bool | None, Field(alias="autheticatorFlow")] = None
    id: str | None = None
    flow_id: Annotated[str | None, Field(alias="flowId")] = None
    parent_flow: Annotated[str | None, Field(alias="parentFlow")] = None


class AuthenticationFlowRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str | None = None
    alias: str | None = None
    description: str | None = None
    provider_id: Annotated[str | None, Field(alias="providerId")] = None
    top_level: Annotated[bool | None, Field(alias="topLevel")] = None
    built_in: Annotated[bool | None, Field(alias="builtIn")] = None
    authentication_executions: Annotated[
        list[AuthenticationExecutionExportRepresentation] | None,
        Field(alias="authenticationExecutions"),
    ] = None


class AuthenticatorConfigRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str | None = None
    alias: str | None = None
    config: dict[str, str] | None = None


class BruteForceStrategy(Enum):
    linear = "LINEAR"
    multiple = "MULTIPLE"


class CertificateRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    private_key: Annotated[str | None, Field(alias="privateKey")] = None
    public_key: Annotated[str | None, Field(alias="publicKey")] = None
    certificate: str | None = None
    kid: str | None = None


class ClaimRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: bool | None = None
    username: bool | None = None
    profile: bool | None = None
    picture: bool | None = None
    website: bool | None = None
    email: bool | None = None
    gender: bool | None = None
    locale: bool | None = None
    address: bool | None = None
    phone: bool | None = None


class ClientInitialAccessCreatePresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    expiration: int | None = None
    count: int | None = None


class ClientInitialAccessPresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str | None = None
    token: str | None = None
    timestamp: int | None = None
    expiration: int | None = None
    count: int | None = None
    remaining_count: Annotated[int | None, Field(alias="remainingCount")] = None


class ClientPolicyConditionRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    condition: str | None = None
    configuration: dict[str, Any] | None = None
    """
    Configuration settings as a JSON object
    """


class ClientPolicyExecutorRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    executor: str | None = None
    configuration: dict[str, Any] | None = None
    """
    Configuration settings as a JSON object
    """


class ClientPolicyRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: str | None = None
    description: str | None = None
    enabled: bool | None = None
    conditions: list[ClientPolicyConditionRepresentation] | None = None
    profiles: list[str] | None = None


class ClientProfileRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: str | None = None
    description: str | None = None
    executors: list[ClientPolicyExecutorRepresentation] | None = None


class ClientProfilesRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    profiles: list[ClientProfileRepresentation] | None = None
    global_profiles: Annotated[
        list[ClientProfileRepresentation] | None, Field(alias="globalProfiles")
    ] = None


class Composites(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    realm: list[str] | None = None
    client: dict[str, list[str]] | None = None
    application: dict[str, list[str]] | None = None


class ConfigPropertyRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: str | None = None
    label: str | None = None
    help_text: Annotated[str | None, Field(alias="helpText")] = None
    type: str | None = None
    default_value: Annotated[Any | None, Field(alias="defaultValue")] = None
    options: list[str] | None = None
    secret: bool | None = None
    required: bool | None = None
    read_only: Annotated[bool | None, Field(alias="readOnly")] = None


class Confirmation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    x5t_s256: Annotated[str | None, Field(alias="x5t#S256")] = None
    jkt: str | None = None


class DecisionEffect(Enum):
    permit = "PERMIT"
    deny = "DENY"


class DecisionStrategy(Enum):
    affirmative = "AFFIRMATIVE"
    unanimous = "UNANIMOUS"
    consensus = "CONSENSUS"


class EnforcementMode(Enum):
    permissive = "PERMISSIVE"
    enforcing = "ENFORCING"
    disabled = "DISABLED"


class ErrorRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    field: str | None = None
    error_message: Annotated[str | None, Field(alias="errorMessage")] = None
    params: list | None = None
    errors: list[ErrorRepresentation] | None = None


class EventRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str | None = None
    time: int | None = None
    type: str | None = None
    realm_id: Annotated[str | None, Field(alias="realmId")] = None
    client_id: Annotated[str | None, Field(alias="clientId")] = None
    user_id: Annotated[str | None, Field(alias="userId")] = None
    session_id: Annotated[str | None, Field(alias="sessionId")] = None
    ip_address: Annotated[str | None, Field(alias="ipAddress")] = None
    error: str | None = None
    details: dict[str, str] | None = None


class FederatedIdentityRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    identity_provider: Annotated[str | None, Field(alias="identityProvider")] = None
    user_id: Annotated[str | None, Field(alias="userId")] = None
    user_name: Annotated[str | None, Field(alias="userName")] = None


class GlobalRequestResult(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    success_requests: Annotated[list[str] | None, Field(alias="successRequests")] = None
    failed_requests: Annotated[list[str] | None, Field(alias="failedRequests")] = None


class GroupRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str | None = None
    name: str | None = None
    description: str | None = None
    path: str | None = None
    parent_id: Annotated[str | None, Field(alias="parentId")] = None
    sub_group_count: Annotated[int | None, Field(alias="subGroupCount")] = None
    sub_groups: Annotated[
        list[GroupRepresentation] | None, Field(alias="subGroups")
    ] = None
    attributes: dict[str, list[str]] | None = None
    realm_roles: Annotated[list[str] | None, Field(alias="realmRoles")] = None
    client_roles: Annotated[dict[str, list[str]] | None, Field(alias="clientRoles")] = (
        None
    )
    access: dict[str, bool] | None = None


class IDToken(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    jti: str | None = None
    exp: int | None = None
    nbf: int | None = None
    iat: int | None = None
    iss: str | None = None
    sub: str | None = None
    typ: str | None = None
    azp: str | None = None
    other_claims: Annotated[dict[str, Any] | None, Field(alias="otherClaims")] = None
    nonce: str | None = None
    auth_time: int | None = None
    sid: str | None = None
    at_hash: str | None = None
    c_hash: str | None = None
    name: str | None = None
    given_name: str | None = None
    family_name: str | None = None
    middle_name: str | None = None
    nickname: str | None = None
    preferred_username: str | None = None
    profile: str | None = None
    picture: str | None = None
    website: str | None = None
    email: str | None = None
    email_verified: bool | None = None
    gender: str | None = None
    birthdate: str | None = None
    zoneinfo: str | None = None
    locale: str | None = None
    phone_number: str | None = None
    phone_number_verified: bool | None = None
    address: AddressClaimSet | None = None
    updated_at: int | None = None
    claims_locales: str | None = None
    acr: str | None = None
    s_hash: str | None = None


class IdentityProviderMapperRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str | None = None
    name: str | None = None
    identity_provider_alias: Annotated[
        str | None, Field(alias="identityProviderAlias")
    ] = None
    identity_provider_mapper: Annotated[
        str | None, Field(alias="identityProviderMapper")
    ] = None
    config: dict[str, str] | None = None


class IdentityProviderMapperTypeRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str | None = None
    name: str | None = None
    category: str | None = None
    help_text: Annotated[str | None, Field(alias="helpText")] = None
    properties: list[ConfigPropertyRepresentation] | None = None


class IdentityProviderRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    alias: str | None = None
    display_name: Annotated[str | None, Field(alias="displayName")] = None
    internal_id: Annotated[str | None, Field(alias="internalId")] = None
    provider_id: Annotated[str | None, Field(alias="providerId")] = None
    enabled: bool | None = None
    update_profile_first_login_mode: Annotated[
        str | None, Field(alias="updateProfileFirstLoginMode")
    ] = None
    trust_email: Annotated[bool | None, Field(alias="trustEmail")] = None
    store_token: Annotated[bool | None, Field(alias="storeToken")] = None
    add_read_token_role_on_create: Annotated[
        bool | None, Field(alias="addReadTokenRoleOnCreate")
    ] = None
    authenticate_by_default: Annotated[
        bool | None, Field(alias="authenticateByDefault")
    ] = None
    link_only: Annotated[bool | None, Field(alias="linkOnly")] = None
    hide_on_login: Annotated[bool | None, Field(alias="hideOnLogin")] = None
    first_broker_login_flow_alias: Annotated[
        str | None, Field(alias="firstBrokerLoginFlowAlias")
    ] = None
    post_broker_login_flow_alias: Annotated[
        str | None, Field(alias="postBrokerLoginFlowAlias")
    ] = None
    organization_id: Annotated[str | None, Field(alias="organizationId")] = None
    config: dict[str, str] | None = None
    update_profile_first_login: Annotated[
        bool | None, Field(alias="updateProfileFirstLogin")
    ] = None


class KeyStoreConfig(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    realm_certificate: Annotated[bool | None, Field(alias="realmCertificate")] = None
    store_password: Annotated[str | None, Field(alias="storePassword")] = None
    key_password: Annotated[str | None, Field(alias="keyPassword")] = None
    key_alias: Annotated[str | None, Field(alias="keyAlias")] = None
    realm_alias: Annotated[str | None, Field(alias="realmAlias")] = None
    format: str | None = None
    key_size: Annotated[int | None, Field(alias="keySize")] = None
    validity: int | None = None


class KeyUse(Enum):
    sig = "SIG"
    enc = "ENC"


class Logic(Enum):
    positive = "POSITIVE"
    negative = "NEGATIVE"


class ManagementPermissionReference(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    enabled: bool | None = None
    resource: str | None = None
    scope_permissions: Annotated[
        dict[str, str] | None, Field(alias="scopePermissions")
    ] = None


class MembershipType(Enum):
    unmanaged = "UNMANAGED"
    managed = "MANAGED"


class OrganizationDomainRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: str | None = None
    verified: bool | None = None


class PathCacheConfig(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    max_entries: Annotated[int | None, Field(alias="max-entries")] = None
    lifespan: int | None = None


class Permission(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    rsid: str | None = None
    rsname: str | None = None
    scopes: list[str] | None = None
    claims: dict[str, list[str]] | None = None


class PolicyEnforcementMode(Enum):
    enforcing = "ENFORCING"
    permissive = "PERMISSIVE"
    disabled = "DISABLED"


class PolicyProviderRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: str | None = None
    name: str | None = None
    group: str | None = None


class PropertyConfig(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    applicable: bool | None = None
    value: Any | None = None


class ProtocolMapperEvaluationRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    mapper_id: Annotated[str | None, Field(alias="mapperId")] = None
    mapper_name: Annotated[str | None, Field(alias="mapperName")] = None
    container_id: Annotated[str | None, Field(alias="containerId")] = None
    container_name: Annotated[str | None, Field(alias="containerName")] = None
    container_type: Annotated[str | None, Field(alias="containerType")] = None
    protocol_mapper: Annotated[str | None, Field(alias="protocolMapper")] = None


class ProtocolMapperRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str | None = None
    name: str | None = None
    protocol: str | None = None
    protocol_mapper: Annotated[str | None, Field(alias="protocolMapper")] = None
    consent_required: Annotated[bool | None, Field(alias="consentRequired")] = None
    consent_text: Annotated[str | None, Field(alias="consentText")] = None
    config: dict[str, str] | None = None


class PublishedRealmRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    realm: str | None = None
    public_key: str | None = None
    token_service: Annotated[str | None, Field(alias="token-service")] = None
    account_service: Annotated[str | None, Field(alias="account-service")] = None
    tokens_not_before: Annotated[int | None, Field(alias="tokens-not-before")] = None


class RealmEventsConfigRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    events_enabled: Annotated[bool | None, Field(alias="eventsEnabled")] = None
    events_expiration: Annotated[int | None, Field(alias="eventsExpiration")] = None
    events_listeners: Annotated[list[str] | None, Field(alias="eventsListeners")] = None
    enabled_event_types: Annotated[
        list[str] | None, Field(alias="enabledEventTypes")
    ] = None
    admin_events_enabled: Annotated[bool | None, Field(alias="adminEventsEnabled")] = (
        None
    )
    admin_events_details_enabled: Annotated[
        bool | None, Field(alias="adminEventsDetailsEnabled")
    ] = None


class RequiredActionConfigInfoRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    properties: list[ConfigPropertyRepresentation] | None = None


class RequiredActionConfigRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    config: dict[str, str] | None = None


class RequiredActionProviderRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    alias: str | None = None
    name: str | None = None
    provider_id: Annotated[str | None, Field(alias="providerId")] = None
    enabled: bool | None = None
    default_action: Annotated[bool | None, Field(alias="defaultAction")] = None
    priority: int | None = None
    config: dict[str, str] | None = None


class ResourceOwnerRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str | None = None
    name: str | None = None


class ResourceType(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    type: str | None = None
    scopes: list[str] | None = None
    scope_aliases: Annotated[
        dict[str, list[str]] | None, Field(alias="scopeAliases")
    ] = None
    group_type: Annotated[str | None, Field(alias="groupType")] = None


class RoleRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str | None = None
    name: str | None = None
    description: str | None = None
    scope_param_required: Annotated[bool | None, Field(alias="scopeParamRequired")] = (
        None
    )
    composite: bool | None = None
    composites: Composites | None = None
    client_role: Annotated[bool | None, Field(alias="clientRole")] = None
    container_id: Annotated[str | None, Field(alias="containerId")] = None
    attributes: dict[str, list[str]] | None = None


class RolesRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    realm: list[RoleRepresentation] | None = None
    client: dict[str, list[RoleRepresentation]] | None = None
    application: dict[str, list[RoleRepresentation]] | None = None


class ScopeEnforcementMode(Enum):
    all = "ALL"
    any = "ANY"
    disabled = "DISABLED"


class ScopeMappingRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    self: str | None = None
    client: str | None = None
    client_template: Annotated[str | None, Field(alias="clientTemplate")] = None
    client_scope: Annotated[str | None, Field(alias="clientScope")] = None
    roles: list[str] | None = None


class SocialLinkRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    social_provider: Annotated[str | None, Field(alias="socialProvider")] = None
    social_user_id: Annotated[str | None, Field(alias="socialUserId")] = None
    social_username: Annotated[str | None, Field(alias="socialUsername")] = None


class UPAttributePermissions(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    view: list[str] | None = None
    edit: list[str] | None = None


class UPAttributeRequired(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    roles: list[str] | None = None
    scopes: list[str] | None = None


class UPAttributeSelector(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    scopes: list[str] | None = None


class UPGroup(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: str | None = None
    display_header: Annotated[str | None, Field(alias="displayHeader")] = None
    display_description: Annotated[str | None, Field(alias="displayDescription")] = None
    annotations: dict[str, Any] | None = None


class UnmanagedAttributePolicy(Enum):
    enabled = "ENABLED"
    admin_view = "ADMIN_VIEW"
    admin_edit = "ADMIN_EDIT"


class UserConsentRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    client_id: Annotated[str | None, Field(alias="clientId")] = None
    granted_client_scopes: Annotated[
        list[str] | None, Field(alias="grantedClientScopes")
    ] = None
    created_date: Annotated[int | None, Field(alias="createdDate")] = None
    last_updated_date: Annotated[int | None, Field(alias="lastUpdatedDate")] = None
    granted_realm_roles: Annotated[
        list[str] | None, Field(alias="grantedRealmRoles")
    ] = None


class UserFederationMapperRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str | None = None
    name: str | None = None
    federation_provider_display_name: Annotated[
        str | None, Field(alias="federationProviderDisplayName")
    ] = None
    federation_mapper_type: Annotated[
        str | None, Field(alias="federationMapperType")
    ] = None
    config: dict[str, str] | None = None


class UserFederationProviderRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str | None = None
    display_name: Annotated[str | None, Field(alias="displayName")] = None
    provider_name: Annotated[str | None, Field(alias="providerName")] = None
    config: dict[str, str] | None = None
    priority: int | None = None
    full_sync_period: Annotated[int | None, Field(alias="fullSyncPeriod")] = None
    changed_sync_period: Annotated[int | None, Field(alias="changedSyncPeriod")] = None
    last_sync: Annotated[int | None, Field(alias="lastSync")] = None


class UserManagedAccessConfig(BaseModel):
    pass
    model_config = ConfigDict(
        populate_by_name=True,
    )


class UserProfileAttributeGroupMetadata(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: str | None = None
    display_header: Annotated[str | None, Field(alias="displayHeader")] = None
    display_description: Annotated[str | None, Field(alias="displayDescription")] = None
    annotations: dict[str, Any] | None = None


class UserProfileAttributeMetadata(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: str | None = None
    display_name: Annotated[str | None, Field(alias="displayName")] = None
    required: bool | None = None
    read_only: Annotated[bool | None, Field(alias="readOnly")] = None
    annotations: dict[str, Any] | None = None
    validators: dict[str, dict[str, Any]] | None = None
    group: str | None = None
    multivalued: bool | None = None


class UserProfileMetadata(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    attributes: list[UserProfileAttributeMetadata] | None = None
    groups: list[UserProfileAttributeGroupMetadata] | None = None


class UserSessionRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str | None = None
    username: str | None = None
    user_id: Annotated[str | None, Field(alias="userId")] = None
    ip_address: Annotated[str | None, Field(alias="ipAddress")] = None
    start: int | None = None
    last_access: Annotated[int | None, Field(alias="lastAccess")] = None
    remember_me: Annotated[bool | None, Field(alias="rememberMe")] = None
    clients: dict[str, str] | None = None
    transient_user: Annotated[bool | None, Field(alias="transientUser")] = None


class AdminEventRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str | None = None
    time: int | None = None
    realm_id: Annotated[str | None, Field(alias="realmId")] = None
    auth_details: Annotated[
        AuthDetailsRepresentation | None, Field(alias="authDetails")
    ] = None
    operation_type: Annotated[str | None, Field(alias="operationType")] = None
    resource_type: Annotated[str | None, Field(alias="resourceType")] = None
    resource_path: Annotated[str | None, Field(alias="resourcePath")] = None
    representation: str | None = None
    error: str | None = None
    details: dict[str, str] | None = None


class AuthenticatorConfigInfoRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: str | None = None
    provider_id: Annotated[str | None, Field(alias="providerId")] = None
    help_text: Annotated[str | None, Field(alias="helpText")] = None
    properties: list[ConfigPropertyRepresentation] | None = None


class Authorization(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    permissions: list[Permission] | None = None


class AuthorizationSchema(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    resource_types: Annotated[
        dict[str, ResourceType] | None, Field(alias="resourceTypes")
    ] = None


class ClientMappingsRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str | None = None
    client: str | None = None
    mappings: list[RoleRepresentation] | None = None


class ClientPoliciesRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    policies: list[ClientPolicyRepresentation] | None = None
    global_policies: Annotated[
        list[ClientPolicyRepresentation] | None, Field(alias="globalPolicies")
    ] = None


class ClientScopeRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str | None = None
    name: str | None = None
    description: str | None = None
    protocol: str | None = None
    attributes: dict[str, str] | None = None
    protocol_mappers: Annotated[
        list[ProtocolMapperRepresentation] | None, Field(alias="protocolMappers")
    ] = None


class ClientTemplateRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str | None = None
    name: str | None = None
    description: str | None = None
    protocol: str | None = None
    full_scope_allowed: Annotated[bool | None, Field(alias="fullScopeAllowed")] = None
    bearer_only: Annotated[bool | None, Field(alias="bearerOnly")] = None
    consent_required: Annotated[bool | None, Field(alias="consentRequired")] = None
    standard_flow_enabled: Annotated[
        bool | None, Field(alias="standardFlowEnabled")
    ] = None
    implicit_flow_enabled: Annotated[
        bool | None, Field(alias="implicitFlowEnabled")
    ] = None
    direct_access_grants_enabled: Annotated[
        bool | None, Field(alias="directAccessGrantsEnabled")
    ] = None
    service_accounts_enabled: Annotated[
        bool | None, Field(alias="serviceAccountsEnabled")
    ] = None
    public_client: Annotated[bool | None, Field(alias="publicClient")] = None
    frontchannel_logout: Annotated[bool | None, Field(alias="frontchannelLogout")] = (
        None
    )
    attributes: dict[str, str] | None = None
    protocol_mappers: Annotated[
        list[ProtocolMapperRepresentation] | None, Field(alias="protocolMappers")
    ] = None


class ClientTypeRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: str | None = None
    provider: str | None = None
    parent: str | None = None
    config: dict[str, PropertyConfig] | None = None


class ClientTypesRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    client_types: Annotated[
        list[ClientTypeRepresentation] | None, Field(alias="client-types")
    ] = None
    global_client_types: Annotated[
        list[ClientTypeRepresentation] | None, Field(alias="global-client-types")
    ] = None


class ComponentRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str | None = None
    name: str | None = None
    provider_id: Annotated[str | None, Field(alias="providerId")] = None
    provider_type: Annotated[str | None, Field(alias="providerType")] = None
    parent_id: Annotated[str | None, Field(alias="parentId")] = None
    sub_type: Annotated[str | None, Field(alias="subType")] = None
    config: dict[str, list[str]] | None = None


class ComponentTypeRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str | None = None
    help_text: Annotated[str | None, Field(alias="helpText")] = None
    properties: list[ConfigPropertyRepresentation] | None = None
    metadata: dict[str, Any] | None = None


class CredentialRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str | None = None
    type: str | None = None
    user_label: Annotated[str | None, Field(alias="userLabel")] = None
    created_date: Annotated[int | None, Field(alias="createdDate")] = None
    secret_data: Annotated[str | None, Field(alias="secretData")] = None
    credential_data: Annotated[str | None, Field(alias="credentialData")] = None
    priority: int | None = None
    value: str | None = None
    temporary: bool | None = None
    device: str | None = None
    hashed_salted_value: Annotated[str | None, Field(alias="hashedSaltedValue")] = None
    salt: str | None = None
    hash_iterations: Annotated[int | None, Field(alias="hashIterations")] = None
    counter: int | None = None
    algorithm: str | None = None
    digits: int | None = None
    period: int | None = None
    config: dict[str, list[str]] | None = None
    federation_link: Annotated[str | None, Field(alias="federationLink")] = None


class KeyMetadataRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    provider_id: Annotated[str | None, Field(alias="providerId")] = None
    provider_priority: Annotated[int | None, Field(alias="providerPriority")] = None
    kid: str | None = None
    status: str | None = None
    type: str | None = None
    algorithm: str | None = None
    public_key: Annotated[str | None, Field(alias="publicKey")] = None
    certificate: str | None = None
    use: KeyUse | None = None
    valid_to: Annotated[int | None, Field(alias="validTo")] = None


class KeysMetadataRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    active: dict[str, str] | None = None
    keys: list[KeyMetadataRepresentation] | None = None


class MappingsRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    realm_mappings: Annotated[
        list[RoleRepresentation] | None, Field(alias="realmMappings")
    ] = None
    client_mappings: Annotated[
        dict[str, ClientMappingsRepresentation] | None, Field(alias="clientMappings")
    ] = None


class MemberRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str | None = None
    username: str | None = None
    first_name: Annotated[str | None, Field(alias="firstName")] = None
    last_name: Annotated[str | None, Field(alias="lastName")] = None
    email: str | None = None
    email_verified: Annotated[bool | None, Field(alias="emailVerified")] = None
    attributes: dict[str, list[str]] | None = None
    user_profile_metadata: Annotated[
        UserProfileMetadata | None, Field(alias="userProfileMetadata")
    ] = None
    enabled: bool | None = None
    self: str | None = None
    origin: str | None = None
    created_timestamp: Annotated[int | None, Field(alias="createdTimestamp")] = None
    totp: bool | None = None
    federation_link: Annotated[str | None, Field(alias="federationLink")] = None
    service_account_client_id: Annotated[
        str | None, Field(alias="serviceAccountClientId")
    ] = None
    credentials: list[CredentialRepresentation] | None = None
    disableable_credential_types: Annotated[
        list[str] | None, Field(alias="disableableCredentialTypes")
    ] = None
    required_actions: Annotated[list[str] | None, Field(alias="requiredActions")] = None
    federated_identities: Annotated[
        list[FederatedIdentityRepresentation] | None, Field(alias="federatedIdentities")
    ] = None
    realm_roles: Annotated[list[str] | None, Field(alias="realmRoles")] = None
    client_roles: Annotated[dict[str, list[str]] | None, Field(alias="clientRoles")] = (
        None
    )
    client_consents: Annotated[
        list[UserConsentRepresentation] | None, Field(alias="clientConsents")
    ] = None
    not_before: Annotated[int | None, Field(alias="notBefore")] = None
    application_roles: Annotated[
        dict[str, list[str]] | None, Field(alias="applicationRoles")
    ] = None
    social_links: Annotated[
        list[SocialLinkRepresentation] | None, Field(alias="socialLinks")
    ] = None
    groups: list[str] | None = None
    access: dict[str, bool] | None = None
    membership_type: Annotated[MembershipType | None, Field(alias="membershipType")] = (
        None
    )


class MethodConfig(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    method: str | None = None
    scopes: list[str] | None = None
    scopes_enforcement_mode: Annotated[
        ScopeEnforcementMode | None, Field(alias="scopes-enforcement-mode")
    ] = None


class OrganizationRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str | None = None
    name: str | None = None
    alias: str | None = None
    enabled: bool | None = None
    description: str | None = None
    redirect_url: Annotated[str | None, Field(alias="redirectUrl")] = None
    attributes: dict[str, list[str]] | None = None
    domains: list[OrganizationDomainRepresentation] | None = None
    members: list[MemberRepresentation] | None = None
    identity_providers: Annotated[
        list[IdentityProviderRepresentation] | None, Field(alias="identityProviders")
    ] = None


class PathConfig(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: str | None = None
    type: str | None = None
    path: str | None = None
    methods: list[MethodConfig] | None = None
    scopes: list[str] | None = None
    id: str | None = None
    enforcement_mode: Annotated[
        EnforcementMode | None, Field(alias="enforcement-mode")
    ] = None
    claim_information_point: Annotated[
        dict[str, dict[str, Any]] | None, Field(alias="claim-information-point")
    ] = None
    invalidated: bool | None = None
    static_path: Annotated[bool | None, Field(alias="staticPath")] = None
    static: bool | None = None


class PolicyEnforcerConfig(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    enforcement_mode: Annotated[
        EnforcementMode | None, Field(alias="enforcement-mode")
    ] = None
    paths: list[PathConfig] | None = None
    path_cache: Annotated[PathCacheConfig | None, Field(alias="path-cache")] = None
    lazy_load_paths: Annotated[bool | None, Field(alias="lazy-load-paths")] = None
    on_deny_redirect_to: Annotated[str | None, Field(alias="on-deny-redirect-to")] = (
        None
    )
    user_managed_access: Annotated[
        UserManagedAccessConfig | None, Field(alias="user-managed-access")
    ] = None
    claim_information_point: Annotated[
        dict[str, dict[str, Any]] | None, Field(alias="claim-information-point")
    ] = None
    http_method_as_scope: Annotated[
        bool | None, Field(alias="http-method-as-scope")
    ] = None
    realm: str | None = None
    auth_server_url: Annotated[str | None, Field(alias="auth-server-url")] = None
    credentials: dict[str, Any] | None = None
    resource: str | None = None


class UPAttribute(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    name: str | None = None
    display_name: Annotated[str | None, Field(alias="displayName")] = None
    validations: dict[str, dict[str, Any]] | None = None
    annotations: dict[str, Any] | None = None
    required: UPAttributeRequired | None = None
    permissions: UPAttributePermissions | None = None
    selector: UPAttributeSelector | None = None
    group: str | None = None
    multivalued: bool | None = None


class UPConfig(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    attributes: list[UPAttribute] | None = None
    groups: list[UPGroup] | None = None
    unmanaged_attribute_policy: Annotated[
        UnmanagedAttributePolicy | None, Field(alias="unmanagedAttributePolicy")
    ] = None


class UserRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str | None = None
    username: str | None = None
    first_name: Annotated[str | None, Field(alias="firstName")] = None
    last_name: Annotated[str | None, Field(alias="lastName")] = None
    email: str | None = None
    email_verified: Annotated[bool | None, Field(alias="emailVerified")] = None
    attributes: dict[str, list[str]] | None = None
    user_profile_metadata: Annotated[
        UserProfileMetadata | None, Field(alias="userProfileMetadata")
    ] = None
    enabled: bool | None = None
    self: str | None = None
    origin: str | None = None
    created_timestamp: Annotated[int | None, Field(alias="createdTimestamp")] = None
    totp: bool | None = None
    federation_link: Annotated[str | None, Field(alias="federationLink")] = None
    service_account_client_id: Annotated[
        str | None, Field(alias="serviceAccountClientId")
    ] = None
    credentials: list[CredentialRepresentation] | None = None
    disableable_credential_types: Annotated[
        list[str] | None, Field(alias="disableableCredentialTypes")
    ] = None
    required_actions: Annotated[list[str] | None, Field(alias="requiredActions")] = None
    federated_identities: Annotated[
        list[FederatedIdentityRepresentation] | None, Field(alias="federatedIdentities")
    ] = None
    realm_roles: Annotated[list[str] | None, Field(alias="realmRoles")] = None
    client_roles: Annotated[dict[str, list[str]] | None, Field(alias="clientRoles")] = (
        None
    )
    client_consents: Annotated[
        list[UserConsentRepresentation] | None, Field(alias="clientConsents")
    ] = None
    not_before: Annotated[int | None, Field(alias="notBefore")] = None
    application_roles: Annotated[
        dict[str, list[str]] | None, Field(alias="applicationRoles")
    ] = None
    social_links: Annotated[
        list[SocialLinkRepresentation] | None, Field(alias="socialLinks")
    ] = None
    groups: list[str] | None = None
    access: dict[str, bool] | None = None


class AccessToken(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    jti: str | None = None
    exp: int | None = None
    nbf: int | None = None
    iat: int | None = None
    iss: str | None = None
    sub: str | None = None
    typ: str | None = None
    azp: str | None = None
    other_claims: Annotated[dict[str, Any] | None, Field(alias="otherClaims")] = None
    nonce: str | None = None
    auth_time: int | None = None
    sid: str | None = None
    at_hash: str | None = None
    c_hash: str | None = None
    name: str | None = None
    given_name: str | None = None
    family_name: str | None = None
    middle_name: str | None = None
    nickname: str | None = None
    preferred_username: str | None = None
    profile: str | None = None
    picture: str | None = None
    website: str | None = None
    email: str | None = None
    email_verified: bool | None = None
    gender: str | None = None
    birthdate: str | None = None
    zoneinfo: str | None = None
    locale: str | None = None
    phone_number: str | None = None
    phone_number_verified: bool | None = None
    address: AddressClaimSet | None = None
    updated_at: int | None = None
    claims_locales: str | None = None
    acr: str | None = None
    s_hash: str | None = None
    trusted_certs: Annotated[list[str] | None, Field(alias="trusted-certs")] = None
    allowed_origins: Annotated[list[str] | None, Field(alias="allowed-origins")] = None
    realm_access: Access | None = None
    resource_access: dict[str, Access] | None = None
    authorization: Authorization | None = None
    cnf: Confirmation | None = None
    scope: str | None = None


class InstallationAdapterConfig(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    realm: str | None = None
    realm_public_key: Annotated[str | None, Field(alias="realm-public-key")] = None
    auth_server_url: Annotated[str | None, Field(alias="auth-server-url")] = None
    ssl_required: Annotated[str | None, Field(alias="ssl-required")] = None
    bearer_only: Annotated[bool | None, Field(alias="bearer-only")] = None
    resource: str | None = None
    public_client: Annotated[bool | None, Field(alias="public-client")] = None
    verify_token_audience: Annotated[
        bool | None, Field(alias="verify-token-audience")
    ] = None
    credentials: dict[str, Any] | None = None
    use_resource_role_mappings: Annotated[
        bool | None, Field(alias="use-resource-role-mappings")
    ] = None
    confidential_port: Annotated[int | None, Field(alias="confidential-port")] = None
    policy_enforcer: Annotated[
        PolicyEnforcerConfig | None, Field(alias="policy-enforcer")
    ] = None


class AbstractPolicyRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str | None = None
    name: str | None = None
    description: str | None = None
    type: str | None = None
    policies: list[str] | None = None
    resources: list[str] | None = None
    scopes: list[str] | None = None
    logic: Logic | None = None
    decision_strategy: Annotated[
        DecisionStrategy | None, Field(alias="decisionStrategy")
    ] = None
    owner: str | None = None
    resource_type: Annotated[str | None, Field(alias="resourceType")] = None
    resources_data: Annotated[
        list[ResourceRepresentation] | None, Field(alias="resourcesData")
    ] = None
    scopes_data: Annotated[
        list[ScopeRepresentation] | None, Field(alias="scopesData")
    ] = None


class ApplicationRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str | None = None
    client_id: Annotated[str | None, Field(alias="clientId")] = None
    description: str | None = None
    type: str | None = None
    root_url: Annotated[str | None, Field(alias="rootUrl")] = None
    admin_url: Annotated[str | None, Field(alias="adminUrl")] = None
    base_url: Annotated[str | None, Field(alias="baseUrl")] = None
    surrogate_auth_required: Annotated[
        bool | None, Field(alias="surrogateAuthRequired")
    ] = None
    enabled: bool | None = None
    always_display_in_console: Annotated[
        bool | None, Field(alias="alwaysDisplayInConsole")
    ] = None
    client_authenticator_type: Annotated[
        str | None, Field(alias="clientAuthenticatorType")
    ] = None
    secret: str | None = None
    registration_access_token: Annotated[
        str | None, Field(alias="registrationAccessToken")
    ] = None
    default_roles: Annotated[list[str] | None, Field(alias="defaultRoles")] = None
    redirect_uris: Annotated[list[str] | None, Field(alias="redirectUris")] = None
    web_origins: Annotated[list[str] | None, Field(alias="webOrigins")] = None
    not_before: Annotated[int | None, Field(alias="notBefore")] = None
    bearer_only: Annotated[bool | None, Field(alias="bearerOnly")] = None
    consent_required: Annotated[bool | None, Field(alias="consentRequired")] = None
    standard_flow_enabled: Annotated[
        bool | None, Field(alias="standardFlowEnabled")
    ] = None
    implicit_flow_enabled: Annotated[
        bool | None, Field(alias="implicitFlowEnabled")
    ] = None
    direct_access_grants_enabled: Annotated[
        bool | None, Field(alias="directAccessGrantsEnabled")
    ] = None
    service_accounts_enabled: Annotated[
        bool | None, Field(alias="serviceAccountsEnabled")
    ] = None
    authorization_services_enabled: Annotated[
        bool | None, Field(alias="authorizationServicesEnabled")
    ] = None
    direct_grants_only: Annotated[bool | None, Field(alias="directGrantsOnly")] = None
    public_client: Annotated[bool | None, Field(alias="publicClient")] = None
    frontchannel_logout: Annotated[bool | None, Field(alias="frontchannelLogout")] = (
        None
    )
    protocol: str | None = None
    attributes: dict[str, str] | None = None
    authentication_flow_binding_overrides: Annotated[
        dict[str, str] | None, Field(alias="authenticationFlowBindingOverrides")
    ] = None
    full_scope_allowed: Annotated[bool | None, Field(alias="fullScopeAllowed")] = None
    node_re_registration_timeout: Annotated[
        int | None, Field(alias="nodeReRegistrationTimeout")
    ] = None
    registered_nodes: Annotated[
        dict[str, int] | None, Field(alias="registeredNodes")
    ] = None
    protocol_mappers: Annotated[
        list[ProtocolMapperRepresentation] | None, Field(alias="protocolMappers")
    ] = None
    client_template: Annotated[str | None, Field(alias="clientTemplate")] = None
    use_template_config: Annotated[bool | None, Field(alias="useTemplateConfig")] = None
    use_template_scope: Annotated[bool | None, Field(alias="useTemplateScope")] = None
    use_template_mappers: Annotated[bool | None, Field(alias="useTemplateMappers")] = (
        None
    )
    default_client_scopes: Annotated[
        list[str] | None, Field(alias="defaultClientScopes")
    ] = None
    optional_client_scopes: Annotated[
        list[str] | None, Field(alias="optionalClientScopes")
    ] = None
    authorization_settings: Annotated[
        ResourceServerRepresentation | None, Field(alias="authorizationSettings")
    ] = None
    access: dict[str, bool] | None = None
    origin: str | None = None
    name: str | None = None
    claims: ClaimRepresentation | None = None


class ClientRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str | None = None
    client_id: Annotated[str | None, Field(alias="clientId")] = None
    name: str | None = None
    description: str | None = None
    type: str | None = None
    root_url: Annotated[str | None, Field(alias="rootUrl")] = None
    admin_url: Annotated[str | None, Field(alias="adminUrl")] = None
    base_url: Annotated[str | None, Field(alias="baseUrl")] = None
    surrogate_auth_required: Annotated[
        bool | None, Field(alias="surrogateAuthRequired")
    ] = None
    enabled: bool | None = None
    always_display_in_console: Annotated[
        bool | None, Field(alias="alwaysDisplayInConsole")
    ] = None
    client_authenticator_type: Annotated[
        str | None, Field(alias="clientAuthenticatorType")
    ] = None
    secret: str | None = None
    registration_access_token: Annotated[
        str | None, Field(alias="registrationAccessToken")
    ] = None
    default_roles: Annotated[list[str] | None, Field(alias="defaultRoles")] = None
    redirect_uris: Annotated[list[str] | None, Field(alias="redirectUris")] = None
    web_origins: Annotated[list[str] | None, Field(alias="webOrigins")] = None
    not_before: Annotated[int | None, Field(alias="notBefore")] = None
    bearer_only: Annotated[bool | None, Field(alias="bearerOnly")] = None
    consent_required: Annotated[bool | None, Field(alias="consentRequired")] = None
    standard_flow_enabled: Annotated[
        bool | None, Field(alias="standardFlowEnabled")
    ] = None
    implicit_flow_enabled: Annotated[
        bool | None, Field(alias="implicitFlowEnabled")
    ] = None
    direct_access_grants_enabled: Annotated[
        bool | None, Field(alias="directAccessGrantsEnabled")
    ] = None
    service_accounts_enabled: Annotated[
        bool | None, Field(alias="serviceAccountsEnabled")
    ] = None
    authorization_services_enabled: Annotated[
        bool | None, Field(alias="authorizationServicesEnabled")
    ] = None
    direct_grants_only: Annotated[bool | None, Field(alias="directGrantsOnly")] = None
    public_client: Annotated[bool | None, Field(alias="publicClient")] = None
    frontchannel_logout: Annotated[bool | None, Field(alias="frontchannelLogout")] = (
        None
    )
    protocol: str | None = None
    attributes: dict[str, str] | None = None
    authentication_flow_binding_overrides: Annotated[
        dict[str, str] | None, Field(alias="authenticationFlowBindingOverrides")
    ] = None
    full_scope_allowed: Annotated[bool | None, Field(alias="fullScopeAllowed")] = None
    node_re_registration_timeout: Annotated[
        int | None, Field(alias="nodeReRegistrationTimeout")
    ] = None
    registered_nodes: Annotated[
        dict[str, int] | None, Field(alias="registeredNodes")
    ] = None
    protocol_mappers: Annotated[
        list[ProtocolMapperRepresentation] | None, Field(alias="protocolMappers")
    ] = None
    client_template: Annotated[str | None, Field(alias="clientTemplate")] = None
    use_template_config: Annotated[bool | None, Field(alias="useTemplateConfig")] = None
    use_template_scope: Annotated[bool | None, Field(alias="useTemplateScope")] = None
    use_template_mappers: Annotated[bool | None, Field(alias="useTemplateMappers")] = (
        None
    )
    default_client_scopes: Annotated[
        list[str] | None, Field(alias="defaultClientScopes")
    ] = None
    optional_client_scopes: Annotated[
        list[str] | None, Field(alias="optionalClientScopes")
    ] = None
    authorization_settings: Annotated[
        ResourceServerRepresentation | None, Field(alias="authorizationSettings")
    ] = None
    access: dict[str, bool] | None = None
    origin: str | None = None


class ComponentExportRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str | None = None
    name: str | None = None
    provider_id: Annotated[str | None, Field(alias="providerId")] = None
    sub_type: Annotated[str | None, Field(alias="subType")] = None
    sub_components: Annotated[
        dict[str, list[ComponentExportRepresentation]] | None,
        Field(alias="subComponents"),
    ] = None
    config: dict[str, list[str]] | None = None


class EvaluationResultRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    resource: ResourceRepresentation | None = None
    scopes: list[ScopeRepresentation] | None = None
    policies: list[PolicyResultRepresentation] | None = None
    status: DecisionEffect | None = None
    allowed_scopes: Annotated[
        list[ScopeRepresentation] | None, Field(alias="allowedScopes")
    ] = None
    denied_scopes: Annotated[
        list[ScopeRepresentation] | None, Field(alias="deniedScopes")
    ] = None


class OAuthClientRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str | None = None
    client_id: Annotated[str | None, Field(alias="clientId")] = None
    description: str | None = None
    type: str | None = None
    root_url: Annotated[str | None, Field(alias="rootUrl")] = None
    admin_url: Annotated[str | None, Field(alias="adminUrl")] = None
    base_url: Annotated[str | None, Field(alias="baseUrl")] = None
    surrogate_auth_required: Annotated[
        bool | None, Field(alias="surrogateAuthRequired")
    ] = None
    enabled: bool | None = None
    always_display_in_console: Annotated[
        bool | None, Field(alias="alwaysDisplayInConsole")
    ] = None
    client_authenticator_type: Annotated[
        str | None, Field(alias="clientAuthenticatorType")
    ] = None
    secret: str | None = None
    registration_access_token: Annotated[
        str | None, Field(alias="registrationAccessToken")
    ] = None
    default_roles: Annotated[list[str] | None, Field(alias="defaultRoles")] = None
    redirect_uris: Annotated[list[str] | None, Field(alias="redirectUris")] = None
    web_origins: Annotated[list[str] | None, Field(alias="webOrigins")] = None
    not_before: Annotated[int | None, Field(alias="notBefore")] = None
    bearer_only: Annotated[bool | None, Field(alias="bearerOnly")] = None
    consent_required: Annotated[bool | None, Field(alias="consentRequired")] = None
    standard_flow_enabled: Annotated[
        bool | None, Field(alias="standardFlowEnabled")
    ] = None
    implicit_flow_enabled: Annotated[
        bool | None, Field(alias="implicitFlowEnabled")
    ] = None
    direct_access_grants_enabled: Annotated[
        bool | None, Field(alias="directAccessGrantsEnabled")
    ] = None
    service_accounts_enabled: Annotated[
        bool | None, Field(alias="serviceAccountsEnabled")
    ] = None
    authorization_services_enabled: Annotated[
        bool | None, Field(alias="authorizationServicesEnabled")
    ] = None
    direct_grants_only: Annotated[bool | None, Field(alias="directGrantsOnly")] = None
    public_client: Annotated[bool | None, Field(alias="publicClient")] = None
    frontchannel_logout: Annotated[bool | None, Field(alias="frontchannelLogout")] = (
        None
    )
    protocol: str | None = None
    attributes: dict[str, str] | None = None
    authentication_flow_binding_overrides: Annotated[
        dict[str, str] | None, Field(alias="authenticationFlowBindingOverrides")
    ] = None
    full_scope_allowed: Annotated[bool | None, Field(alias="fullScopeAllowed")] = None
    node_re_registration_timeout: Annotated[
        int | None, Field(alias="nodeReRegistrationTimeout")
    ] = None
    registered_nodes: Annotated[
        dict[str, int] | None, Field(alias="registeredNodes")
    ] = None
    protocol_mappers: Annotated[
        list[ProtocolMapperRepresentation] | None, Field(alias="protocolMappers")
    ] = None
    client_template: Annotated[str | None, Field(alias="clientTemplate")] = None
    use_template_config: Annotated[bool | None, Field(alias="useTemplateConfig")] = None
    use_template_scope: Annotated[bool | None, Field(alias="useTemplateScope")] = None
    use_template_mappers: Annotated[bool | None, Field(alias="useTemplateMappers")] = (
        None
    )
    default_client_scopes: Annotated[
        list[str] | None, Field(alias="defaultClientScopes")
    ] = None
    optional_client_scopes: Annotated[
        list[str] | None, Field(alias="optionalClientScopes")
    ] = None
    authorization_settings: Annotated[
        ResourceServerRepresentation | None, Field(alias="authorizationSettings")
    ] = None
    access: dict[str, bool] | None = None
    origin: str | None = None
    name: str | None = None
    claims: ClaimRepresentation | None = None


class PolicyEvaluationRequest(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    context: dict[str, dict[str, str]] | None = None
    resources: list[ResourceRepresentation] | None = None
    resource_type: Annotated[str | None, Field(alias="resourceType")] = None
    client_id: Annotated[str | None, Field(alias="clientId")] = None
    user_id: Annotated[str | None, Field(alias="userId")] = None
    role_ids: Annotated[list[str] | None, Field(alias="roleIds")] = None
    entitlements: bool | None = None


class PolicyEvaluationResponse(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    results: list[EvaluationResultRepresentation] | None = None
    entitlements: bool | None = None
    status: DecisionEffect | None = None
    rpt: AccessToken | None = None


class PolicyRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str | None = None
    name: str | None = None
    description: str | None = None
    type: str | None = None
    policies: list[str] | None = None
    resources: list[str] | None = None
    scopes: list[str] | None = None
    logic: Logic | None = None
    decision_strategy: Annotated[
        DecisionStrategy | None, Field(alias="decisionStrategy")
    ] = None
    owner: str | None = None
    resource_type: Annotated[str | None, Field(alias="resourceType")] = None
    resources_data: Annotated[
        list[ResourceRepresentation] | None, Field(alias="resourcesData")
    ] = None
    scopes_data: Annotated[
        list[ScopeRepresentation] | None, Field(alias="scopesData")
    ] = None
    config: dict[str, str] | None = None


class PolicyResultRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    policy: PolicyRepresentation | None = None
    status: DecisionEffect | None = None
    associated_policies: Annotated[
        list[PolicyResultRepresentation] | None, Field(alias="associatedPolicies")
    ] = None
    scopes: list[str] | None = None
    resource_type: Annotated[str | None, Field(alias="resourceType")] = None


class RealmRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str | None = None
    realm: str | None = None
    display_name: Annotated[str | None, Field(alias="displayName")] = None
    display_name_html: Annotated[str | None, Field(alias="displayNameHtml")] = None
    not_before: Annotated[int | None, Field(alias="notBefore")] = None
    default_signature_algorithm: Annotated[
        str | None, Field(alias="defaultSignatureAlgorithm")
    ] = None
    revoke_refresh_token: Annotated[bool | None, Field(alias="revokeRefreshToken")] = (
        None
    )
    refresh_token_max_reuse: Annotated[
        int | None, Field(alias="refreshTokenMaxReuse")
    ] = None
    access_token_lifespan: Annotated[int | None, Field(alias="accessTokenLifespan")] = (
        None
    )
    access_token_lifespan_for_implicit_flow: Annotated[
        int | None, Field(alias="accessTokenLifespanForImplicitFlow")
    ] = None
    sso_session_idle_timeout: Annotated[
        int | None, Field(alias="ssoSessionIdleTimeout")
    ] = None
    sso_session_max_lifespan: Annotated[
        int | None, Field(alias="ssoSessionMaxLifespan")
    ] = None
    sso_session_idle_timeout_remember_me: Annotated[
        int | None, Field(alias="ssoSessionIdleTimeoutRememberMe")
    ] = None
    sso_session_max_lifespan_remember_me: Annotated[
        int | None, Field(alias="ssoSessionMaxLifespanRememberMe")
    ] = None
    offline_session_idle_timeout: Annotated[
        int | None, Field(alias="offlineSessionIdleTimeout")
    ] = None
    offline_session_max_lifespan_enabled: Annotated[
        bool | None, Field(alias="offlineSessionMaxLifespanEnabled")
    ] = None
    offline_session_max_lifespan: Annotated[
        int | None, Field(alias="offlineSessionMaxLifespan")
    ] = None
    client_session_idle_timeout: Annotated[
        int | None, Field(alias="clientSessionIdleTimeout")
    ] = None
    client_session_max_lifespan: Annotated[
        int | None, Field(alias="clientSessionMaxLifespan")
    ] = None
    client_offline_session_idle_timeout: Annotated[
        int | None, Field(alias="clientOfflineSessionIdleTimeout")
    ] = None
    client_offline_session_max_lifespan: Annotated[
        int | None, Field(alias="clientOfflineSessionMaxLifespan")
    ] = None
    access_code_lifespan: Annotated[int | None, Field(alias="accessCodeLifespan")] = (
        None
    )
    access_code_lifespan_user_action: Annotated[
        int | None, Field(alias="accessCodeLifespanUserAction")
    ] = None
    access_code_lifespan_login: Annotated[
        int | None, Field(alias="accessCodeLifespanLogin")
    ] = None
    action_token_generated_by_admin_lifespan: Annotated[
        int | None, Field(alias="actionTokenGeneratedByAdminLifespan")
    ] = None
    action_token_generated_by_user_lifespan: Annotated[
        int | None, Field(alias="actionTokenGeneratedByUserLifespan")
    ] = None
    oauth2_device_code_lifespan: Annotated[
        int | None, Field(alias="oauth2DeviceCodeLifespan")
    ] = None
    oauth2_device_polling_interval: Annotated[
        int | None, Field(alias="oauth2DevicePollingInterval")
    ] = None
    enabled: bool | None = None
    ssl_required: Annotated[str | None, Field(alias="sslRequired")] = None
    password_credential_grant_allowed: Annotated[
        bool | None, Field(alias="passwordCredentialGrantAllowed")
    ] = None
    registration_allowed: Annotated[bool | None, Field(alias="registrationAllowed")] = (
        None
    )
    registration_email_as_username: Annotated[
        bool | None, Field(alias="registrationEmailAsUsername")
    ] = None
    remember_me: Annotated[bool | None, Field(alias="rememberMe")] = None
    verify_email: Annotated[bool | None, Field(alias="verifyEmail")] = None
    login_with_email_allowed: Annotated[
        bool | None, Field(alias="loginWithEmailAllowed")
    ] = None
    duplicate_emails_allowed: Annotated[
        bool | None, Field(alias="duplicateEmailsAllowed")
    ] = None
    reset_password_allowed: Annotated[
        bool | None, Field(alias="resetPasswordAllowed")
    ] = None
    edit_username_allowed: Annotated[
        bool | None, Field(alias="editUsernameAllowed")
    ] = None
    user_cache_enabled: Annotated[bool | None, Field(alias="userCacheEnabled")] = None
    realm_cache_enabled: Annotated[bool | None, Field(alias="realmCacheEnabled")] = None
    brute_force_protected: Annotated[
        bool | None, Field(alias="bruteForceProtected")
    ] = None
    permanent_lockout: Annotated[bool | None, Field(alias="permanentLockout")] = None
    max_temporary_lockouts: Annotated[
        int | None, Field(alias="maxTemporaryLockouts")
    ] = None
    brute_force_strategy: Annotated[
        BruteForceStrategy | None, Field(alias="bruteForceStrategy")
    ] = None
    max_failure_wait_seconds: Annotated[
        int | None, Field(alias="maxFailureWaitSeconds")
    ] = None
    minimum_quick_login_wait_seconds: Annotated[
        int | None, Field(alias="minimumQuickLoginWaitSeconds")
    ] = None
    wait_increment_seconds: Annotated[
        int | None, Field(alias="waitIncrementSeconds")
    ] = None
    quick_login_check_milli_seconds: Annotated[
        int | None, Field(alias="quickLoginCheckMilliSeconds")
    ] = None
    max_delta_time_seconds: Annotated[
        int | None, Field(alias="maxDeltaTimeSeconds")
    ] = None
    failure_factor: Annotated[int | None, Field(alias="failureFactor")] = None
    private_key: Annotated[str | None, Field(alias="privateKey")] = None
    public_key: Annotated[str | None, Field(alias="publicKey")] = None
    certificate: str | None = None
    code_secret: Annotated[str | None, Field(alias="codeSecret")] = None
    roles: RolesRepresentation | None = None
    groups: list[GroupRepresentation] | None = None
    default_roles: Annotated[list[str] | None, Field(alias="defaultRoles")] = None
    default_role: Annotated[RoleRepresentation | None, Field(alias="defaultRole")] = (
        None
    )
    admin_permissions_client: Annotated[
        ClientRepresentation | None, Field(alias="adminPermissionsClient")
    ] = None
    default_groups: Annotated[list[str] | None, Field(alias="defaultGroups")] = None
    required_credentials: Annotated[
        list[str] | None, Field(alias="requiredCredentials")
    ] = None
    password_policy: Annotated[str | None, Field(alias="passwordPolicy")] = None
    otp_policy_type: Annotated[str | None, Field(alias="otpPolicyType")] = None
    otp_policy_algorithm: Annotated[str | None, Field(alias="otpPolicyAlgorithm")] = (
        None
    )
    otp_policy_initial_counter: Annotated[
        int | None, Field(alias="otpPolicyInitialCounter")
    ] = None
    otp_policy_digits: Annotated[int | None, Field(alias="otpPolicyDigits")] = None
    otp_policy_look_ahead_window: Annotated[
        int | None, Field(alias="otpPolicyLookAheadWindow")
    ] = None
    otp_policy_period: Annotated[int | None, Field(alias="otpPolicyPeriod")] = None
    otp_policy_code_reusable: Annotated[
        bool | None, Field(alias="otpPolicyCodeReusable")
    ] = None
    otp_supported_applications: Annotated[
        list[str] | None, Field(alias="otpSupportedApplications")
    ] = None
    localization_texts: Annotated[
        dict[str, dict[str, str]] | None, Field(alias="localizationTexts")
    ] = None
    web_authn_policy_rp_entity_name: Annotated[
        str | None, Field(alias="webAuthnPolicyRpEntityName")
    ] = None
    web_authn_policy_signature_algorithms: Annotated[
        list[str] | None, Field(alias="webAuthnPolicySignatureAlgorithms")
    ] = None
    web_authn_policy_rp_id: Annotated[str | None, Field(alias="webAuthnPolicyRpId")] = (
        None
    )
    web_authn_policy_attestation_conveyance_preference: Annotated[
        str | None, Field(alias="webAuthnPolicyAttestationConveyancePreference")
    ] = None
    web_authn_policy_authenticator_attachment: Annotated[
        str | None, Field(alias="webAuthnPolicyAuthenticatorAttachment")
    ] = None
    web_authn_policy_require_resident_key: Annotated[
        str | None, Field(alias="webAuthnPolicyRequireResidentKey")
    ] = None
    web_authn_policy_user_verification_requirement: Annotated[
        str | None, Field(alias="webAuthnPolicyUserVerificationRequirement")
    ] = None
    web_authn_policy_create_timeout: Annotated[
        int | None, Field(alias="webAuthnPolicyCreateTimeout")
    ] = None
    web_authn_policy_avoid_same_authenticator_register: Annotated[
        bool | None, Field(alias="webAuthnPolicyAvoidSameAuthenticatorRegister")
    ] = None
    web_authn_policy_acceptable_aaguids: Annotated[
        list[str] | None, Field(alias="webAuthnPolicyAcceptableAaguids")
    ] = None
    web_authn_policy_extra_origins: Annotated[
        list[str] | None, Field(alias="webAuthnPolicyExtraOrigins")
    ] = None
    web_authn_policy_passwordless_rp_entity_name: Annotated[
        str | None, Field(alias="webAuthnPolicyPasswordlessRpEntityName")
    ] = None
    web_authn_policy_passwordless_signature_algorithms: Annotated[
        list[str] | None, Field(alias="webAuthnPolicyPasswordlessSignatureAlgorithms")
    ] = None
    web_authn_policy_passwordless_rp_id: Annotated[
        str | None, Field(alias="webAuthnPolicyPasswordlessRpId")
    ] = None
    web_authn_policy_passwordless_attestation_conveyance_preference: Annotated[
        str | None,
        Field(alias="webAuthnPolicyPasswordlessAttestationConveyancePreference"),
    ] = None
    web_authn_policy_passwordless_authenticator_attachment: Annotated[
        str | None, Field(alias="webAuthnPolicyPasswordlessAuthenticatorAttachment")
    ] = None
    web_authn_policy_passwordless_require_resident_key: Annotated[
        str | None, Field(alias="webAuthnPolicyPasswordlessRequireResidentKey")
    ] = None
    web_authn_policy_passwordless_user_verification_requirement: Annotated[
        str | None, Field(alias="webAuthnPolicyPasswordlessUserVerificationRequirement")
    ] = None
    web_authn_policy_passwordless_create_timeout: Annotated[
        int | None, Field(alias="webAuthnPolicyPasswordlessCreateTimeout")
    ] = None
    web_authn_policy_passwordless_avoid_same_authenticator_register: Annotated[
        bool | None,
        Field(alias="webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister"),
    ] = None
    web_authn_policy_passwordless_acceptable_aaguids: Annotated[
        list[str] | None, Field(alias="webAuthnPolicyPasswordlessAcceptableAaguids")
    ] = None
    web_authn_policy_passwordless_extra_origins: Annotated[
        list[str] | None, Field(alias="webAuthnPolicyPasswordlessExtraOrigins")
    ] = None
    web_authn_policy_passwordless_passkeys_enabled: Annotated[
        bool | None, Field(alias="webAuthnPolicyPasswordlessPasskeysEnabled")
    ] = None
    client_profiles: Annotated[
        ClientProfilesRepresentation | None, Field(alias="clientProfiles")
    ] = None
    client_policies: Annotated[
        ClientPoliciesRepresentation | None, Field(alias="clientPolicies")
    ] = None
    users: list[UserRepresentation] | None = None
    federated_users: Annotated[
        list[UserRepresentation] | None, Field(alias="federatedUsers")
    ] = None
    scope_mappings: Annotated[
        list[ScopeMappingRepresentation] | None, Field(alias="scopeMappings")
    ] = None
    client_scope_mappings: Annotated[
        dict[str, list[ScopeMappingRepresentation]] | None,
        Field(alias="clientScopeMappings"),
    ] = None
    clients: list[ClientRepresentation] | None = None
    client_scopes: Annotated[
        list[ClientScopeRepresentation] | None, Field(alias="clientScopes")
    ] = None
    default_default_client_scopes: Annotated[
        list[str] | None, Field(alias="defaultDefaultClientScopes")
    ] = None
    default_optional_client_scopes: Annotated[
        list[str] | None, Field(alias="defaultOptionalClientScopes")
    ] = None
    browser_security_headers: Annotated[
        dict[str, str] | None, Field(alias="browserSecurityHeaders")
    ] = None
    smtp_server: Annotated[dict[str, str] | None, Field(alias="smtpServer")] = None
    user_federation_providers: Annotated[
        list[UserFederationProviderRepresentation] | None,
        Field(alias="userFederationProviders"),
    ] = None
    user_federation_mappers: Annotated[
        list[UserFederationMapperRepresentation] | None,
        Field(alias="userFederationMappers"),
    ] = None
    login_theme: Annotated[str | None, Field(alias="loginTheme")] = None
    account_theme: Annotated[str | None, Field(alias="accountTheme")] = None
    admin_theme: Annotated[str | None, Field(alias="adminTheme")] = None
    email_theme: Annotated[str | None, Field(alias="emailTheme")] = None
    events_enabled: Annotated[bool | None, Field(alias="eventsEnabled")] = None
    events_expiration: Annotated[int | None, Field(alias="eventsExpiration")] = None
    events_listeners: Annotated[list[str] | None, Field(alias="eventsListeners")] = None
    enabled_event_types: Annotated[
        list[str] | None, Field(alias="enabledEventTypes")
    ] = None
    admin_events_enabled: Annotated[bool | None, Field(alias="adminEventsEnabled")] = (
        None
    )
    admin_events_details_enabled: Annotated[
        bool | None, Field(alias="adminEventsDetailsEnabled")
    ] = None
    identity_providers: Annotated[
        list[IdentityProviderRepresentation] | None, Field(alias="identityProviders")
    ] = None
    identity_provider_mappers: Annotated[
        list[IdentityProviderMapperRepresentation] | None,
        Field(alias="identityProviderMappers"),
    ] = None
    protocol_mappers: Annotated[
        list[ProtocolMapperRepresentation] | None, Field(alias="protocolMappers")
    ] = None
    components: dict[str, list[ComponentExportRepresentation]] | None = None
    internationalization_enabled: Annotated[
        bool | None, Field(alias="internationalizationEnabled")
    ] = None
    supported_locales: Annotated[list[str] | None, Field(alias="supportedLocales")] = (
        None
    )
    default_locale: Annotated[str | None, Field(alias="defaultLocale")] = None
    authentication_flows: Annotated[
        list[AuthenticationFlowRepresentation] | None,
        Field(alias="authenticationFlows"),
    ] = None
    authenticator_config: Annotated[
        list[AuthenticatorConfigRepresentation] | None,
        Field(alias="authenticatorConfig"),
    ] = None
    required_actions: Annotated[
        list[RequiredActionProviderRepresentation] | None,
        Field(alias="requiredActions"),
    ] = None
    browser_flow: Annotated[str | None, Field(alias="browserFlow")] = None
    registration_flow: Annotated[str | None, Field(alias="registrationFlow")] = None
    direct_grant_flow: Annotated[str | None, Field(alias="directGrantFlow")] = None
    reset_credentials_flow: Annotated[
        str | None, Field(alias="resetCredentialsFlow")
    ] = None
    client_authentication_flow: Annotated[
        str | None, Field(alias="clientAuthenticationFlow")
    ] = None
    docker_authentication_flow: Annotated[
        str | None, Field(alias="dockerAuthenticationFlow")
    ] = None
    first_broker_login_flow: Annotated[
        str | None, Field(alias="firstBrokerLoginFlow")
    ] = None
    attributes: dict[str, str] | None = None
    keycloak_version: Annotated[str | None, Field(alias="keycloakVersion")] = None
    user_managed_access_allowed: Annotated[
        bool | None, Field(alias="userManagedAccessAllowed")
    ] = None
    organizations_enabled: Annotated[
        bool | None, Field(alias="organizationsEnabled")
    ] = None
    organizations: list[OrganizationRepresentation] | None = None
    verifiable_credentials_enabled: Annotated[
        bool | None, Field(alias="verifiableCredentialsEnabled")
    ] = None
    admin_permissions_enabled: Annotated[
        bool | None, Field(alias="adminPermissionsEnabled")
    ] = None
    social: bool | None = None
    update_profile_on_initial_social_login: Annotated[
        bool | None, Field(alias="updateProfileOnInitialSocialLogin")
    ] = None
    social_providers: Annotated[
        dict[str, str] | None, Field(alias="socialProviders")
    ] = None
    application_scope_mappings: Annotated[
        dict[str, list[ScopeMappingRepresentation]] | None,
        Field(alias="applicationScopeMappings"),
    ] = None
    applications: list[ApplicationRepresentation] | None = None
    oauth_clients: Annotated[
        list[OAuthClientRepresentation] | None, Field(alias="oauthClients")
    ] = None
    client_templates: Annotated[
        list[ClientTemplateRepresentation] | None, Field(alias="clientTemplates")
    ] = None
    o_auth2_device_code_lifespan: Annotated[
        int | None, Field(alias="oAuth2DeviceCodeLifespan")
    ] = None
    o_auth2_device_polling_interval: Annotated[
        int | None, Field(alias="oAuth2DevicePollingInterval")
    ] = None


class ResourceRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    field_id: Annotated[str | None, Field(alias="_id")] = None
    name: str | None = None
    uris: list[str] | None = None
    type: str | None = None
    scopes: list[ScopeRepresentation] | None = None
    icon_uri: str | None = None
    owner: ResourceOwnerRepresentation | None = None
    owner_managed_access: Annotated[bool | None, Field(alias="ownerManagedAccess")] = (
        None
    )
    display_name: Annotated[str | None, Field(alias="displayName")] = None
    attributes: dict[str, list[str]] | None = None
    uri: str | None = None
    scopes_uma: Annotated[
        list[ScopeRepresentation] | None, Field(alias="scopesUma")
    ] = None


class ResourceServerRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str | None = None
    client_id: Annotated[str | None, Field(alias="clientId")] = None
    name: str | None = None
    allow_remote_resource_management: Annotated[
        bool | None, Field(alias="allowRemoteResourceManagement")
    ] = None
    policy_enforcement_mode: Annotated[
        PolicyEnforcementMode | None, Field(alias="policyEnforcementMode")
    ] = None
    resources: list[ResourceRepresentation] | None = None
    policies: list[PolicyRepresentation] | None = None
    scopes: list[ScopeRepresentation] | None = None
    decision_strategy: Annotated[
        DecisionStrategy | None, Field(alias="decisionStrategy")
    ] = None
    authorization_schema: Annotated[
        AuthorizationSchema | None, Field(alias="authorizationSchema")
    ] = None


class ScopeRepresentation(BaseModel):
    model_config = ConfigDict(
        populate_by_name=True,
    )
    id: str | None = None
    name: str | None = None
    icon_uri: Annotated[str | None, Field(alias="iconUri")] = None
    policies: list[PolicyRepresentation] | None = None
    resources: list[ResourceRepresentation] | None = None
    display_name: Annotated[str | None, Field(alias="displayName")] = None


ErrorRepresentation.model_rebuild()
GroupRepresentation.model_rebuild()
AbstractPolicyRepresentation.model_rebuild()
ApplicationRepresentation.model_rebuild()
ClientRepresentation.model_rebuild()
ComponentExportRepresentation.model_rebuild()
EvaluationResultRepresentation.model_rebuild()
OAuthClientRepresentation.model_rebuild()
PolicyEvaluationRequest.model_rebuild()
PolicyRepresentation.model_rebuild()
ResourceRepresentation.model_rebuild()
ResourceServerRepresentation.model_rebuild()
