🎉 Keycloak Realm has been created!

📦 Release Name: {{ .Release.Name }}
🏛️  Realm Name: {{ include "keycloak-realm.realmName" . }}
🔧 Namespace: {{ .Release.Namespace }}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

{{- if .Values.rbac.create }}
✅ RBAC CONFIGURATION

A RoleBinding has been created to grant the Keycloak operator access to this namespace.

Operator Details:
• Namespace: {{ .Values.operatorRef.namespace }}
• ServiceAccount: {{ .Values.rbac.operatorServiceAccountName }}
• ClusterRole: {{ .Values.rbac.operatorClusterRoleName }}

The operator can now read secrets in this namespace that have the required label.

{{- else }}
⚠️  RBAC NOT CONFIGURED

You need to manually create a RoleBinding to grant operator access:

    kubectl create rolebinding keycloak-operator-access \
      --clusterrole={{ .Values.rbac.operatorClusterRoleName }} \
      --serviceaccount={{ .Values.operatorRef.namespace }}:{{ .Values.rbac.operatorServiceAccountName }} \
      -n {{ .Release.Namespace }}

{{- end }}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🔐 IMPORTANT: SECRET LABEL REQUIREMENT

All secrets used by this realm MUST have the following label:

    keycloak.mdvr.nl/allow-operator-read=true

Without this label, the operator will refuse to read the secret.

Example - label an existing secret:

    kubectl label secret my-smtp-password \
      keycloak.mdvr.nl/allow-operator-read=true \
      -n {{ .Release.Namespace }}

Example - create a secret with the label:

    kubectl create secret generic my-smtp-password \
      --from-literal=password='mypassword' \
      -n {{ .Release.Namespace }}
    
    kubectl label secret my-smtp-password \
      keycloak.mdvr.nl/allow-operator-read=true \
      -n {{ .Release.Namespace }}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🔍 MONITORING YOUR REALM

Check the realm status:

    kubectl get keycloakrealm {{ include "keycloak-realm.fullname" . }} -n {{ .Release.Namespace }}

Watch the realm reconciliation:

    kubectl get keycloakrealm {{ include "keycloak-realm.fullname" . }} -n {{ .Release.Namespace }} -w

View realm details:

    kubectl describe keycloakrealm {{ include "keycloak-realm.fullname" . }} -n {{ .Release.Namespace }}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

🔑 REALM AUTHORIZATION TOKEN

Once the realm is Ready, it will generate an authorization token for clients.

1️⃣  Wait for the realm to be ready:

    kubectl wait --for=jsonpath='{.status.phase}'=Ready \
      keycloakrealm/{{ include "keycloak-realm.fullname" . }} \
      -n {{ .Release.Namespace }} --timeout=300s

2️⃣  Get the authorization secret name:

    REALM_SECRET=$(kubectl get keycloakrealm {{ include "keycloak-realm.fullname" . }} \
      -n {{ .Release.Namespace }} \
      -o jsonpath='{.status.authorizationSecretName}')

3️⃣  Retrieve the realm authorization token:

    kubectl get secret $REALM_SECRET \
      -n {{ .Release.Namespace }} \
      -o jsonpath='{.data.token}' | base64 -d

    Save this token - you'll need it to create KeycloakClient resources!

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

📚 NEXT STEPS

To create a client in this realm:

1. Install the keycloak-client chart with this realm's token:

   helm install my-client keycloak-client \
     --set realmRef.name={{ include "keycloak-realm.fullname" . }} \
     --set realmRef.namespace={{ .Release.Namespace }} \
     --set realmRef.authorizationSecretRef.name=$REALM_SECRET

2. Monitor the client status:

   kubectl get keycloakclient -n {{ .Release.Namespace }}

For more information:
• Documentation: https://github.com/vriesdemichael/keycloak-operator
• Issues: https://github.com/vriesdemichael/keycloak-operator/issues

Happy realm managing! 🏰
