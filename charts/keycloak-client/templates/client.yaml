{{/* yaml-language-server: $schema=https://vriesdemichael.github.io/keycloak-operator/schemas/v1/KeycloakClient.json */}}
apiVersion: keycloak.mdvr.nl/v1
kind: KeycloakClient
metadata:
  name: {{ include "keycloak-client.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "keycloak-client.labels" . | nindent 4 }}
  {{- with include "keycloak-client.annotations" . }}
  annotations:
    {{- . | nindent 4 }}
  {{- end }}
spec:
  clientId: {{ include "keycloak-client.clientId" . }}

  {{- with .Values.description }}
  description: {{ . }}
  {{- end }}

  # Realm reference for authorization
  realmRef:
    name: {{ required "realmRef.name is required" .Values.realmRef.name }}
    namespace: {{ required "realmRef.namespace is required" .Values.realmRef.namespace }}
    authorizationSecretRef:
      name: {{ required "realmRef.authorizationSecretRef.name is required" .Values.realmRef.authorizationSecretRef.name }}
      key: {{ .Values.realmRef.authorizationSecretRef.key | default "token" }}

  # Client type
  publicClient: {{ .Values.publicClient }}
  bearerOnly: {{ .Values.bearerOnly }}
  protocol: {{ .Values.protocol }}

  {{- with .Values.redirectUris }}
  redirectUris:
    {{- toYaml . | nindent 4 }}
  {{- end }}

  {{- with .Values.webOrigins }}
  webOrigins:
    {{- toYaml . | nindent 4 }}
  {{- end }}

  {{- with .Values.postLogoutRedirectUris }}
  postLogoutRedirectUris:
    {{- toYaml . | nindent 4 }}
  {{- end }}

  {{- with .Values.baseUrl }}
  baseUrl: {{ . }}
  {{- end }}

  {{- with .Values.rootUrl }}
  rootUrl: {{ . }}
  {{- end }}

  {{- with .Values.adminUrl }}
  adminUrl: {{ . }}
  {{- end }}

  {{- with .Values.settings }}
  settings:
    enabled: {{ .enabled }}
    clientAuthenticatorType: {{ $.Values.clientAuthenticatorType }}
    standardFlowEnabled: {{ $.Values.standardFlowEnabled }}
    implicitFlowEnabled: {{ $.Values.implicitFlowEnabled }}
    directAccessGrantsEnabled: {{ $.Values.directAccessGrantsEnabled }}
    serviceAccountsEnabled: {{ $.Values.serviceAccountsEnabled }}
    authorizationServicesEnabled: {{ $.Values.authorizationServicesEnabled }}
    consentRequired: {{ $.Values.consentRequired }}
    displayOnConsentScreen: {{ $.Values.displayOnConsentScreen }}
    frontchannelLogout: {{ $.Values.frontchannelLogout }}
    alwaysDisplayInConsole: {{ $.Values.alwaysDisplayInConsole }}
    fullScopeAllowed: {{ $.Values.fullScopeAllowed }}

    {{- with .pkceCodeChallengeMethod }}
    pkceCodeChallengeMethod: {{ . }}
    {{- end }}

    {{- if .accessTokenLifespan }}
    accessTokenLifespan: {{ .accessTokenLifespan }}
    {{- end }}

    {{- if .clientSessionIdleTimeout }}
    clientSessionIdleTimeout: {{ .clientSessionIdleTimeout }}
    {{- end }}

    {{- if .clientSessionMaxLifespan }}
    clientSessionMaxLifespan: {{ .clientSessionMaxLifespan }}
    {{- end }}
  {{- end }}

  {{- with .Values.defaultClientScopes }}
  defaultClientScopes:
    {{- toYaml . | nindent 4 }}
  {{- end }}

  {{- with .Values.optionalClientScopes }}
  optionalClientScopes:
    {{- toYaml . | nindent 4 }}
  {{- end }}

  {{- if or .Values.serviceAccountRoles.realmRoles .Values.serviceAccountRoles.clientRoles }}
  serviceAccountRoles:
    {{- with .Values.serviceAccountRoles.realmRoles }}
    realmRoles:
      {{- toYaml . | nindent 6 }}
    {{- end }}
    {{- with .Values.serviceAccountRoles.clientRoles }}
    clientRoles:
      {{- toYaml . | nindent 6 }}
    {{- end }}
  {{- end }}

  {{- with .Values.protocolMappers }}
  protocolMappers:
    {{- toYaml . | nindent 4 }}
  {{- end }}

  {{- if or .Values.authenticationFlow.browserFlow .Values.authenticationFlow.directGrantFlow .Values.authenticationFlow.clientAuthenticationFlow }}
  authenticationFlow:
    {{- with .Values.authenticationFlow.browserFlow }}
    browserFlow: {{ . }}
    {{- end }}
    {{- with .Values.authenticationFlow.directGrantFlow }}
    directGrantFlow: {{ . }}
    {{- end }}
    {{- with .Values.authenticationFlow.clientAuthenticationFlow }}
    clientAuthenticationFlow: {{ . }}
    {{- end }}
  {{- end }}

  {{- if not .Values.publicClient }}
  # Secret management (for confidential clients)
  manageSecret: {{ .Values.manageSecret }}
  {{- if .Values.secretName }}
  secretName: {{ .Values.secretName }}
  {{- end }}
  regenerateSecret: {{ .Values.regenerateSecret }}
  {{- end }}
