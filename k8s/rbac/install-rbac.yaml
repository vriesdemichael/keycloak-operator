# Install RBAC configuration for Keycloak Operator
# This provides cluster-wide permissions for cross-namespace operations
# Usage: kubectl apply -f k8s/rbac/install-rbac.yaml

---
# Namespace for the operator
apiVersion: v1
kind: Namespace
metadata:
  name: keycloak-system
  labels:
    app.kubernetes.io/name: keycloak-operator
    app.kubernetes.io/component: namespace
    # Pod Security Standards
    pod-security.kubernetes.io/enforce: restricted
    pod-security.kubernetes.io/audit: restricted
    pod-security.kubernetes.io/warn: restricted

---
# Service Account for the operator
apiVersion: v1
kind: ServiceAccount
metadata:
  name: keycloak-operator
  namespace: keycloak-system
  labels:
    app.kubernetes.io/name: keycloak-operator
    app.kubernetes.io/component: service-account
automountServiceAccountToken: true

---
# ClusterRole with all necessary permissions
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: keycloak-operator
  labels:
    app.kubernetes.io/name: keycloak-operator
    app.kubernetes.io/component: rbac
rules:
# Core Keycloak resource management
- apiGroups: ["keycloak.mdvr.nl"]
  resources:
  - keycloaks
  - keycloakclients
  - keycloakrealms
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

# Status and finalizers for custom resources
- apiGroups: ["keycloak.mdvr.nl"]
  resources:
  - keycloaks/status
  - keycloakclients/status
  - keycloakrealms/status
  - keycloaks/finalizers
  - keycloakclients/finalizers
  - keycloakrealms/finalizers
  verbs: ["get", "update", "patch"]

# Kubernetes core resource management
- apiGroups: ["apps"]
  resources: ["deployments", "statefulsets", "replicasets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

# Status subresources for workload introspection
- apiGroups: ["apps"]
  resources: ["deployments/status", "statefulsets/status", "replicasets/status"]
  verbs: ["get"]

- apiGroups: [""]
  resources: ["services", "configmaps", "secrets", "persistentvolumeclaims"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

- apiGroups: [""]
  resources: ["pods", "pods/log", "events", "namespaces", "nodes"]
  verbs: ["get", "list", "watch", "create", "patch"]

# Networking
- apiGroups: ["networking.k8s.io"]
  resources: ["ingresses", "networkpolicies"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

# Monitoring and observability
- apiGroups: ["monitoring.coreos.com"]
  resources: ["servicemonitors"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

# Certificate management
- apiGroups: ["cert-manager.io"]
  resources: ["certificates", "certificaterequests", "issuers", "clusterissuers"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

# CRD management
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["get", "list", "watch"]

# Authorization API for self-permission checks (health/diagnostics)
- apiGroups: ["authorization.k8s.io"]
  resources: ["subjectaccessreviews"]
  verbs: ["create"]

# CloudNativePG read-only access (database cluster resolution)
- apiGroups: ["postgresql.cnpg.io"]
  resources: ["clusters", "poolers", "backups"]
  verbs: ["get", "list", "watch"]

# Webhook configuration
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["validatingadmissionwebhooks", "mutatingadmissionwebhooks"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

# OpenShift support (optional)
- apiGroups: ["route.openshift.io"]
  resources: ["routes"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

- apiGroups: ["security.openshift.io"]
  resources: ["securitycontextconstraints"]
  verbs: ["use"]
  resourceNames: ["anyuid", "restricted"]

# Leader election (leases) required by tests & multi-replica operation
# Kopf peering for leader election (HA)
- apiGroups: ["kopf.dev"]
  resources: ["clusterkopfpeerings", "kopfpeerings"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

- apiGroups: ["coordination.k8s.io"]
  resources: ["leases"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

---
# ClusterRoleBinding to grant permissions to the service account
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: keycloak-operator
  labels:
    app.kubernetes.io/name: keycloak-operator
    app.kubernetes.io/component: rbac
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: keycloak-operator
subjects:
- kind: ServiceAccount
  name: keycloak-operator
  namespace: keycloak-system

---
# Role for leader election (within operator namespace)
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: keycloak-operator-leader-election
  namespace: keycloak-system
  labels:
    app.kubernetes.io/name: keycloak-operator
    app.kubernetes.io/component: rbac
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["coordination.k8s.io"]
  resources: ["leases"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]

---
# RoleBinding for leader election
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: keycloak-operator-leader-election
  namespace: keycloak-system
  labels:
    app.kubernetes.io/name: keycloak-operator
    app.kubernetes.io/component: rbac
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: keycloak-operator-leader-election
subjects:
- kind: ServiceAccount
  name: keycloak-operator
  namespace: keycloak-system