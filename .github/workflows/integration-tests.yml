name: Integration Tests

# This workflow follows 2025 Kubernetes operator testing best practices:
# - Uses unified Makefile commands for consistency with local development
# - Leverages cluster reuse optimization where possible
# - Follows Kubebuilder/Operator SDK conventions
# - Separates unit tests (fast feedback) from integration tests (comprehensive validation)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      kubernetes_version:
        description: 'Kubernetes version to test against'
        required: false
        default: 'v1.28.0'
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  integration-tests:
    name: Integration Tests (K8s ${{ matrix.k8s-version }})
    runs-on: ubuntu-latest
    timeout-minutes: 45

    strategy:
      fail-fast: false
      matrix:
        k8s-version:
          - v1.30.0

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true
        cache-dependency-glob: "pyproject.toml"

    - name: Install dependencies
      run: |
        # Install with dev and integration test dependencies
        uv sync --group dev --group integration

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Set up Kind
      uses: helm/kind-action@v1.10.0
      with:
        version: v0.20.0
        kubectl_version: ${{ matrix.k8s-version }}
        cluster_name: keycloak-operator-test
        config: tests/kind/kind-config.yaml
        node_image: kindest/node:${{ matrix.k8s-version }}
        wait: 300s

    - name: Verify Kind cluster and export kubeconfig
      run: |
        # Verify cluster is working
        kubectl cluster-info
        kubectl get nodes
        kubectl get pods -A
        
        # Export kubeconfig for integration tests
        # Kind/helm-kind-action configures kubectl at ~/.kube/config
        export KUBECONFIG="${HOME}/.kube/config"
        echo "KUBECONFIG=${KUBECONFIG}" >> $GITHUB_ENV
        ls -la ${KUBECONFIG}
        echo "Kubeconfig configured at: ${KUBECONFIG}"

    - name: Build operator image
      run: |
        echo "Building operator image..."
        make build-test
        
    - name: Load operator image into Kind
      if: success()
      run: |
        echo "Loading operator image into Kind cluster..."
        kind load docker-image keycloak-operator:test --name keycloak-operator-test
        echo "Image loaded successfully"

    - name: Install CloudNativePG operator
      if: success()
      run: |
        echo "Installing CloudNativePG operator..."
        helm repo add cnpg https://cloudnative-pg.github.io/charts
        helm repo update
        helm upgrade --install cnpg cnpg/cloudnative-pg \
          --namespace cnpg-system \
          --create-namespace \
          --wait \
          --timeout=300s
        
        echo "Waiting for CNPG operator to be ready..."
        kubectl wait -n cnpg-system \
          --for=condition=available deployment/cnpg-cloudnative-pg \
          --timeout=300s
        
        echo "CNPG operator is ready!"
        kubectl get pods -n cnpg-system

    - name: Create PostgreSQL database cluster
      if: success()
      run: |
        echo "Creating namespace for Keycloak resources..."
        kubectl create namespace keycloak-system || true
        
        echo "Creating PostgreSQL cluster for Keycloak..."
        cat <<EOF | kubectl apply -f -
        apiVersion: postgresql.cnpg.io/v1
        kind: Cluster
        metadata:
          name: test-keycloak-postgres
          namespace: keycloak-system
        spec:
          instances: 1
          storage:
            size: 1Gi
        EOF
        
        echo "Waiting for PostgreSQL cluster to be ready..."
        kubectl wait --for=condition=ready cluster/test-keycloak-postgres \
          -n keycloak-system \
          --timeout=300s
        
        echo "Waiting for PostgreSQL primary pod to be ready..."
        kubectl wait --for=condition=ready pod \
          -l cnpg.io/cluster=test-keycloak-postgres,role=primary \
          -n keycloak-system \
          --timeout=300s
        
        echo "PostgreSQL cluster is ready!"
        kubectl get clusters.postgresql.cnpg.io -n keycloak-system
        kubectl get pods -n keycloak-system

    - name: Install Keycloak operator
      if: success()
      run: |
        echo "Installing Keycloak operator via Helm chart..."
        helm upgrade --install keycloak-operator ./charts/keycloak-operator \
          --namespace keycloak-system \
          --create-namespace \
          --set namespace.create=false \
          --set crds.install=true \
          --set operator.image.repository=keycloak-operator \
          --set operator.image.tag=test \
          --set operator.image.pullPolicy=Never \
          --set operator.replicaCount=1 \
          --set keycloak.enabled=false \
          --wait \
          --timeout=300s
        
        echo "Waiting for operator to be ready..."
        kubectl wait -n keycloak-system \
          --for=condition=available deployment/keycloak-operator \
          --timeout=300s
        kubectl wait -n keycloak-system \
          --for=condition=ready pod -l app.kubernetes.io/name=keycloak-operator \
          --timeout=300s
        
        echo "Operator is ready!"
        kubectl get pods -n keycloak-system
        kubectl get crds | grep keycloak

    - name: Create shared Keycloak instance for tests
      if: success()
      run: |
        echo "Creating shared Keycloak instance..."
        kubectl apply -f - <<EOF
        apiVersion: keycloak.mdvr.nl/v1
        kind: Keycloak
        metadata:
          name: keycloak
          namespace: keycloak-system
        spec:
          replicas: 1
          image: quay.io/keycloak/keycloak:26.0.0
          database:
            type: postgresql
            host: test-keycloak-postgres-rw
            port: 5432
            database: app
            username: app
            passwordSecret:
              name: test-keycloak-postgres-app
              key: password
          resources:
            requests:
              cpu: 500m
              memory: 1Gi
            limits:
              cpu: 2000m
              memory: 2Gi
        EOF
        
        echo "Waiting for Keycloak deployment to be created..."
        # Wait for deployment to exist (operator needs time to create it)
        for i in {1..30}; do
          if kubectl get deployment test-keycloak-keycloak -n keycloak-system 2>/dev/null; then
            echo "Deployment found!"
            break
          fi
          echo "Waiting for deployment to be created... ($i/30)"
          sleep 2
        done
        
        echo "Waiting for Keycloak deployment to be ready..."
        kubectl wait -n keycloak-system \
          --for=condition=available deployment/keycloak-keycloak \
          --timeout=300s
        
        echo "Waiting for Keycloak pods to be ready..."
        kubectl wait -n keycloak-system \
          --for=condition=ready pod \
          -l keycloak.mdvr.nl/instance=keycloak,keycloak.mdvr.nl/component=server \
          --timeout=300s
        
        echo "Keycloak instance is ready!"
        kubectl get keycloaks -n keycloak-system -o wide
        kubectl get deployments -n keycloak-system
        kubectl get pods -n keycloak-system

    - name: Run integration
      if: success()  # Only run if operator deployed successfully
      env:
        KUBERNETES_VERSION: ${{ matrix.k8s-version }}
      run: |
        # KUBECONFIG is already set from the export step
        echo "Using KUBECONFIG: $KUBECONFIG"
        uv run pytest tests/integration/ -v -n auto --dist=loadscope

    - name: Collect logs and diagnostics
      if: always()
      run: |
        echo "=== Cluster Info ==="
        kubectl cluster-info

        echo "=== Operator Logs ==="
        make operator-logs || kubectl logs -n keycloak-system -l app.kubernetes.io/name=keycloak-operator --all-containers=true --tail=500 || true

        echo "=== Operator Status ==="
        make operator-status || true

        echo "=== Test Resources ==="
        kubectl get keycloaks,keycloakrealms,keycloakclients --all-namespaces || true

        echo "=== Events ==="
        kubectl get events --all-namespaces --sort-by='.lastTimestamp' --tail=50 || true

        echo "=== PostgreSQL Status ==="
        kubectl get -n postgres pods,services || true
        kubectl logs -n postgres -l app=postgres --tail=100 || true

    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-logs-k8s-${{ matrix.k8s-version }}
        path: |
          test-logs/
        retention-days: 7

  # Separate job for running unit tests (faster feedback)
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true

    - name: Install dependencies
      run: uv sync --all-extras

    - name: Run quality checks
      run: |
        make quality

    - name: Generate coverage report
      if: success() || failure()
      run: |
        uv run pytest tests/unit --cov=keycloak_operator --cov-report=xml --cov-report=term

    - name: Upload coverage to Codecov
      if: success() || failure()
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  # Summary job that depends on all test jobs
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [integration-tests, unit-tests]

    steps:
    - name: Check test results
      run: |
        echo "Unit tests: ${{ needs.unit-tests.result }}"
        echo "Integration tests: ${{ needs.integration-tests.result }}"

        if [[ "${{ needs.unit-tests.result }}" == "failure" || "${{ needs.integration-tests.result }}" == "failure" ]]; then
          echo "❌ Some tests failed!"
          exit 1
        else
          echo "✅ All tests passed!"
        fi