name: Release Please

# Automated release management using conventional commits
# - Creates/updates release PR with changelog and version bump
# - When PR is merged, creates GitHub release
# - CI/CD workflow triggers on tag push to publish Docker images

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  release-please:
    name: Release Please
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}

    steps:
      - name: Run Release Please
        id: release
        uses: googleapis/release-please-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          config-file: .github/release-please-config.json
          manifest-file: .github/.release-please-manifest.json

      - name: Dispatch CI/CD workflow for release
        if: steps.release.outputs.release_created == 'true'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Dispatching CI/CD workflow for tag ${{ steps.release.outputs.tag_name }}"
          gh api repos/${{ github.repository }}/dispatches \
            --method POST \
            --field event_type='release-published' \
            --field client_payload[tag]='${{ steps.release.outputs.tag_name }}'

      - name: Release summary
        if: steps.release.outputs.release_created == 'true'
        run: |
          echo "### :rocket: Release Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** \`${{ steps.release.outputs.tag_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Release URL:** ${{ steps.release.outputs.html_url }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "CI/CD workflow will publish Docker images with semver tags." >> $GITHUB_STEP_SUMMARY

      - name: PR summary
        if: steps.release.outputs.pr != ''
        env:
          PR_DATA: ${{ steps.release.outputs.pr }}
        run: |
          echo "### :memo: Release PR Updated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**PR:** ${PR_DATA}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Merge this PR to create a release." >> $GITHUB_STEP_SUMMARY

      - name: Enable auto-merge for non-major release PRs
        if: steps.release.outputs.pr != ''
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_DATA: ${{ steps.release.outputs.pr }}
          VERSION_OUTPUT: ${{ steps.release.outputs.version }}
        run: |
          # Parse PR JSON to get PR number and version
          PR_NUMBER=$(echo "$PR_DATA" | jq -r '.number')
          PR_TITLE=$(echo "$PR_DATA" | jq -r '.title')
          
          # Use version output if available, otherwise extract from PR title
          if [ -n "$VERSION_OUTPUT" ]; then
            VERSION_STRING="$VERSION_OUTPUT"
          else
            VERSION_STRING="$PR_TITLE"
          fi
          
          # Extract version from PR title or version output
          if [[ "$VERSION_STRING" =~ ([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
            
            echo "Detected version: ${MAJOR}.${MINOR}.${PATCH}"
            
            # Auto-merge for non-major versions (minor or patch releases)
            if [[ "$MAJOR" == "0" ]] || [[ "$MINOR" != "0" ]] || [[ "$PATCH" != "0" ]]; then
              echo "Non-major release detected - enabling auto-merge for PR #${PR_NUMBER}"
              
              # Enable auto-merge (will merge automatically when CI passes)
              if gh pr merge $PR_NUMBER --auto --squash --repo ${{ github.repository }}; then
                echo "### :white_check_mark: Auto-merge enabled for non-major release" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "PR #${PR_NUMBER} will merge automatically when all checks pass." >> $GITHUB_STEP_SUMMARY
              else
                echo "### :warning: Auto-merge failed" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "Could not enable auto-merge for PR #${PR_NUMBER}. Manual intervention may be required." >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "Major release detected (v${MAJOR}.0.0) - requires manual review"
              echo "### :warning: Manual Review Required" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "This is a major release (v${MAJOR}.0.0) and requires manual review before merging." >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "Could not parse version from: ${VERSION_STRING}"
            echo "Skipping auto-merge"
          fi
