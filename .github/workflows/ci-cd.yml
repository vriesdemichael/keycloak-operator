name: CI/CD Pipeline

# Unified CI/CD pipeline following 2025 best practices:
# - Build once, test many times, publish once
# - Explicit job dependencies (no race conditions)
# - Fast feedback with parallel execution
# - Clear separation of concerns in job stages
# - Only tested platforms (amd64 only)

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  KEYCLOAK_VERSION: "26.0.0"  # Match version from charts/keycloak-operator/values.yaml

jobs:
  # ==========================================================================
  # STAGE 1: BUILD TEST IMAGES
  # Build operator and check/build optimized Keycloak image
  # ==========================================================================
  
  build-test-image:
    name: Build Test Image
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      keycloak-image: ${{ steps.check-keycloak.outputs.image }}
    
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build operator test image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: images/operator/Dockerfile
          platforms: linux/amd64
          tags: keycloak-operator:test
          outputs: type=docker,dest=/tmp/operator-test.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Upload operator image artifact
        uses: actions/upload-artifact@v4
        with:
          name: operator-image
          path: /tmp/operator-test.tar
          retention-days: 1
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Check if optimized Keycloak image exists
        id: check-keycloak
        run: |
          OPTIMIZED_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/keycloak-optimized:${{ env.KEYCLOAK_VERSION }}"
          
          echo "Checking if optimized Keycloak image exists: ${OPTIMIZED_IMAGE}"
          
          if docker manifest inspect ${OPTIMIZED_IMAGE} >/dev/null 2>&1; then
            echo "✓ Optimized Keycloak image already exists in registry"
            echo "image=${OPTIMIZED_IMAGE}" >> $GITHUB_OUTPUT
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "✗ Optimized Keycloak image does not exist, will build"
            echo "image=keycloak-optimized:test" >> $GITHUB_OUTPUT
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Build optimized Keycloak image
        if: steps.check-keycloak.outputs.exists == 'false'
        uses: docker/build-push-action@v5
        with:
          context: images/keycloak-optimized
          file: images/keycloak-optimized/Dockerfile
          platforms: linux/amd64
          tags: keycloak-optimized:test
          outputs: type=docker,dest=/tmp/keycloak-optimized.tar
          cache-from: type=gha,scope=keycloak-optimized
          cache-to: type=gha,mode=max,scope=keycloak-optimized
          build-args: |
            KEYCLOAK_VERSION=${{ env.KEYCLOAK_VERSION }}
      
      - name: Upload optimized Keycloak image artifact
        if: steps.check-keycloak.outputs.exists == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: keycloak-optimized-image
          path: /tmp/keycloak-optimized.tar
          retention-days: 1

  # ==========================================================================
  # STAGE 2: FAST FEEDBACK (parallel execution)
  # Run quick checks in parallel to fail fast
  # ==========================================================================
  
  unit-tests:
    name: Unit Tests & Coverage
    needs: [build-test-image]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
      
      - name: Install dependencies
        run: uv sync --group test
      
      - name: Run unit tests
        run: uv run pytest tests/unit --cov=keycloak_operator --cov-report=xml --cov-report=term
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: success() || failure()
        with:
          file: ./coverage.xml
          fail_ci_if_error: false
  
  code-quality:
    name: Code Quality
    needs: [build-test-image]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
      
      - name: Install dependencies
        run: uv sync --group quality
      
      - name: Run quality checks (lint, format, type check)
        run: make quality
  
  security-sast:
    name: Security - CodeQL SAST
    needs: [build-test-image]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
          config-file: .github/codeql-config.yml
      
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:python"
  
  security-dependencies:
    name: Security - Dependency Scan
    needs: [build-test-image]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
      
      - name: Install dependencies
        run: uv sync --group security
      
      - name: Run pip-audit
        run: |
          uv run pip-audit --desc || true
      
      - name: Run safety check
        run: |
          uv run safety check --json || true
  
  security-image-scan:
    name: Security - Container Image Scan
    needs: [build-test-image]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    permissions:
      security-events: write
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: operator-image
          path: /tmp
      
      - name: Load image
        run: docker load --input /tmp/operator-test.tar
      
      - name: Run Trivy scanner (SARIF output)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'keycloak-operator:test'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy-test-image'
      
      - name: Run Trivy scanner (table output, fail on critical)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'keycloak-operator:test'
          format: 'table'
          severity: 'CRITICAL,HIGH'
          exit-code: '1'
  
  security-sbom:
    name: Security - SBOM Generation & Validation
    needs: [build-test-image]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: operator-image
          path: /tmp
      
      - name: Load image
        run: docker load --input /tmp/operator-test.tar
      
      - name: Generate SBOM with Syft
        uses: anchore/sbom-action@v0
        with:
          image: keycloak-operator:test
          format: spdx-json
          output-file: sbom.spdx.json
      
      - name: Scan SBOM for vulnerabilities with Grype
        uses: anchore/scan-action@v3
        with:
          sbom: sbom.spdx.json
          fail-build: false
          severity-cutoff: high
      
      - name: Upload SBOM artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sbom-test-image
          path: sbom.spdx.json
          retention-days: 90
  
  security-secrets:
    name: Security - Secret Scanning
    needs: [build-test-image]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: TruffleHog Secret Scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.sha || 'HEAD~1' }}
          head: HEAD
          extra_args: --only-verified

  # ==========================================================================
  # STAGE 3: INTEGRATION TESTS
  # Run comprehensive integration tests on multiple K8s versions
  # Only runs if all fast feedback checks pass
  # ==========================================================================
  
  integration-tests:
    name: Integration Tests (K8s ${{ matrix.k8s-version }})
    needs: 
      - unit-tests
      - code-quality
      - security-sast
      - security-dependencies
      - security-image-scan
      - security-sbom
      - security-secrets
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    strategy:
      fail-fast: false
      matrix:
        k8s-version:
          # - v1.28.0
          # - v1.29.0
          - v1.30.0
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
      
      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: "pyproject.toml"
      
      - name: Install dependencies
        run: uv sync --group test
      
      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: operator-image
          path: /tmp
      
      - name: Load operator image
        run: docker load --input /tmp/operator-test.tar
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Set up Kind
        uses: helm/kind-action@v1.10.0
        with:
          version: v0.20.0
          kubectl_version: ${{ matrix.k8s-version }}
          cluster_name: keycloak-operator-test-${{ github.run_id }}
          config: tests/kind/kind-config.yaml
          node_image: kindest/node:${{ matrix.k8s-version }}
          wait: 300s
      
      - name: Verify Kind cluster and export kubeconfig
        run: |
          kubectl cluster-info
          kubectl get nodes
          kubectl get pods -A
          
          export KUBECONFIG="${HOME}/.kube/config"
          echo "KUBECONFIG=${KUBECONFIG}" >> $GITHUB_ENV
          ls -la ${KUBECONFIG}
          echo "Kubeconfig configured at: ${KUBECONFIG}"
      
      - name: Load operator image into Kind
        run: |
          echo "Loading operator image into Kind cluster..."
          kind load docker-image keycloak-operator:test --name keycloak-operator-test-${{ github.run_id }}
          echo "Image loaded successfully"
      
      - name: Load or pull optimized Keycloak image
        env:
          KEYCLOAK_IMAGE: ${{ needs.build-test-image.outputs.keycloak-image }}
        run: |
          if [[ "${KEYCLOAK_IMAGE}" == ghcr.io/* ]]; then
            echo "Using existing optimized Keycloak image from registry: ${KEYCLOAK_IMAGE}"
            docker pull "${KEYCLOAK_IMAGE}"
            docker tag "${KEYCLOAK_IMAGE}" keycloak-optimized:test
          else
            echo "Loading newly built optimized Keycloak image from artifact..."
            # Download artifact
            mkdir -p /tmp/keycloak
          fi
      
      - name: Download optimized Keycloak image artifact
        if: needs.build-test-image.outputs.keycloak-image == 'keycloak-optimized:test'
        uses: actions/download-artifact@v4
        with:
          name: keycloak-optimized-image
          path: /tmp
      
      - name: Load optimized Keycloak image from artifact
        if: needs.build-test-image.outputs.keycloak-image == 'keycloak-optimized:test'
        run: |
          docker load --input /tmp/keycloak-optimized.tar
          echo "Optimized Keycloak image loaded from artifact"
      
      - name: Load optimized Keycloak image into Kind
        run: |
          echo "Loading optimized Keycloak image into Kind cluster..."
          kind load docker-image keycloak-optimized:test --name keycloak-operator-test-${{ github.run_id }}
          echo "Optimized Keycloak image loaded successfully"
      
      - name: Install CloudNativePG operator
        run: |
          echo "Installing CloudNativePG operator..."
          helm repo add cnpg https://cloudnative-pg.github.io/charts
          helm repo update
          helm upgrade --install cnpg cnpg/cloudnative-pg \
            --namespace cnpg-system \
            --create-namespace \
            --wait \
            --timeout=300s
          
          echo "Waiting for CNPG operator to be ready..."
          kubectl wait -n cnpg-system \
            --for=condition=available deployment/cnpg-cloudnative-pg \
            --timeout=300s
          
          echo "CNPG operator is ready!"
          kubectl get pods -n cnpg-system
      
      - name: Run integration tests
        env:
          KUBERNETES_VERSION: ${{ matrix.k8s-version }}
        run: |
          echo "Using KUBECONFIG: $KUBECONFIG"
          echo "Running integration tests (tests will deploy operator and Keycloak via Helm)..."
          uv run pytest tests/integration/ -v -n auto --dist=loadscope
      
      - name: Collect logs and diagnostics
        if: always()
        run: |
          mkdir -p test-logs
          
          echo "=== Cluster Info ===" | tee test-logs/cluster-info.log
          kubectl cluster-info | tee -a test-logs/cluster-info.log
          
          echo "=== Operator Logs ===" | tee test-logs/operator-logs.log
          kubectl logs -n keycloak-test-system -l app.kubernetes.io/name=keycloak-operator --all-containers=true --tail=1000 >> test-logs/operator-logs.log 2>&1 || echo "No operator logs found in keycloak-test-system"
          
          echo "=== Operator Status ===" | tee test-logs/operator-status.log
          kubectl get deployment -n keycloak-test-system -o wide >> test-logs/operator-status.log 2>&1 || echo "No deployments in keycloak-test-system"
          kubectl describe deployment -n keycloak-test-system keycloak-operator >> test-logs/operator-status.log 2>&1 || echo "No operator deployment found"
          
          echo "=== Test Resources ===" | tee test-logs/test-resources.log
          kubectl get keycloaks,keycloakrealms,keycloakclients --all-namespaces -o wide >> test-logs/test-resources.log 2>&1 || true
          kubectl describe keycloaks --all-namespaces >> test-logs/test-resources-describe.log 2>&1 || true
          
          echo "=== Events ===" | tee test-logs/events.log
          kubectl get events --all-namespaces --sort-by='.lastTimestamp' >> test-logs/events.log 2>&1 || true
          
          echo "=== Keycloak Logs ===" | tee test-logs/keycloak-logs.log
          kubectl logs -n keycloak-test-system -l keycloak.mdvr.nl/component=server --tail=500 >> test-logs/keycloak-logs.log 2>&1 || echo "No Keycloak logs in keycloak-test-system"
          
          echo "=== PostgreSQL Status ===" | tee test-logs/postgres-status.log
          kubectl get clusters.postgresql.cnpg.io --all-namespaces -o wide >> test-logs/postgres-status.log 2>&1 || true
          
          echo "=== All Pods ===" | tee test-logs/all-pods.log
          kubectl get pods --all-namespaces -o wide >> test-logs/all-pods.log 2>&1 || true
      
      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs-k8s-${{ matrix.k8s-version }}-run-${{ github.run_id }}
          path: test-logs/
          retention-days: 7

  # ==========================================================================
  # STAGE 4: BUILD & PUBLISH
  # Build production images and publish to registry
  # Only runs on main branch after all tests pass
  # ==========================================================================
  
  publish-keycloak-optimized:
    name: Publish Optimized Keycloak Image
    needs: [build-test-image, integration-tests]
    if: |
      needs.build-test-image.outputs.keycloak-image == 'keycloak-optimized:test' &&
      ((github.ref == 'refs/heads/main' && github.event_name == 'push') || github.event_name == 'release')
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    permissions:
      contents: read
      packages: write
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push optimized Keycloak image
        uses: docker/build-push-action@v5
        with:
          context: images/keycloak-optimized
          file: images/keycloak-optimized/Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/keycloak-optimized:${{ env.KEYCLOAK_VERSION }}
          labels: |
            org.opencontainers.image.title=Keycloak Optimized
            org.opencontainers.image.description=Pre-optimized Keycloak image for faster startup
            org.opencontainers.image.vendor=Michaël de Vries
            org.opencontainers.image.licenses=Apache-2.0
            org.opencontainers.image.base.name=quay.io/keycloak/keycloak:${{ env.KEYCLOAK_VERSION }}
          cache-from: type=gha,scope=keycloak-optimized
          cache-to: type=gha,mode=max,scope=keycloak-optimized
          build-args: |
            KEYCLOAK_VERSION=${{ env.KEYCLOAK_VERSION }}
      
      - name: Scan optimized Keycloak image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/keycloak-optimized:${{ env.KEYCLOAK_VERSION }}
          format: 'sarif'
          output: 'trivy-keycloak-optimized.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-keycloak-optimized.sarif'
          category: 'trivy-keycloak-optimized'
      
      - name: Summary
        run: |
          echo "### :zap: Optimized Keycloak Image Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Registry:** \`${{ env.REGISTRY }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ env.IMAGE_NAME }}/keycloak-optimized:${{ env.KEYCLOAK_VERSION }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Base Image:** \`quay.io/keycloak/keycloak:${{ env.KEYCLOAK_VERSION }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Features:**" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Pre-built with PostgreSQL driver" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Health and metrics endpoints enabled" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Optimized startup (~64% faster)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Pull command:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/keycloak-optimized:${{ env.KEYCLOAK_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
  
  publish:
    name: Build & Publish Production Images
    needs: [integration-tests]
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      github.event_name == 'release'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    permissions:
      contents: read
      packages: write
      id-token: write
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix=sha-,format=short,enable={{is_default_branch}}
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
          labels: |
            org.opencontainers.image.title=Keycloak Operator
            org.opencontainers.image.description=GitOps-compatible Kubernetes operator for Keycloak
            org.opencontainers.image.vendor=Michaël de Vries
            org.opencontainers.image.licenses=MIT
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
      
      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: spdx-json
          output-file: sbom.spdx.json
          upload-artifact: true
      
      - name: Scan published image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-published-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-published-results.sarif'
          category: 'trivy-published-image'
      
      - name: Scan SBOM for vulnerabilities
        uses: anchore/scan-action@v3
        with:
          sbom: sbom.spdx.json
          fail-build: true
          severity-cutoff: critical
      
      - name: Summary
        run: |
          echo "### :whale: Docker Image Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Registry:** \`${{ env.REGISTRY }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** \`${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tags:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Pull command:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
